<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 户枢不蠹</title>
    <link>https://wwcreator.github.io/categories/mysql/</link>
    <description>Recent content in Mysql on 户枢不蠹</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>yuwen_qing@126.com (wwcreator)</managingEditor>
    <webMaster>yuwen_qing@126.com (wwcreator)</webMaster>
    <copyright>(c) 2017 wwcreator.</copyright>
    <lastBuildDate>Tue, 14 Mar 2017 18:22:41 -0700</lastBuildDate>
    <atom:link href="https://wwcreator.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL Group Replication – Transaction life cycle explained</title>
      <link>https://wwcreator.github.io/2017/03/14/mysql-group-replication--transaction-life-cycle-explained/</link>
      <pubDate>Tue, 14 Mar 2017 18:22:41 -0700</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/03/14/mysql-group-replication--transaction-life-cycle-explained/</guid>
      <description>&lt;p&gt;MySQL Group Replication – Transaction life cycle explained&lt;/p&gt;

&lt;p&gt;MySQL Group Replication - 事务生命周期分析&lt;/p&gt;

&lt;p&gt;MySQL multi master 插件来了，MGR 可以实现在任何 MySQL 成员进行同步更新，冲突处理，成员自动管理和成员故障检测。&lt;/p&gt;

&lt;p&gt;为了更好的理解 MGR 的工作原理，我们将在这篇文章里分析事务的生命周期和组件之间的相互作用，但是在开始之前，我们需要先理解什么是 Group .&lt;/p&gt;

&lt;p&gt;组通讯工具包
多主插件由组通讯工具包支撑，它决定了哪些 MySQL 属于组成员，执行故障检测和提供服务消息。有序消息队列不可思议的是，允许数据在所有成员之间是一致的。你可以在&lt;a href=&#34;http://mysqlhighavailability.com/group-communication-behind-the-scenes/&#34;&gt;Group communication&lt;/a&gt; 这篇文章中详细了解。&lt;/p&gt;

&lt;p&gt;这些强大的属性，加上每个服务器的初始化状态相同，我们就能实现数据库状态机复制。&lt;/p&gt;

&lt;p&gt;除了组通讯系统的内容，剩下的基本概念是视图。当一个MySQL服务器加入到组，就会创建一个新的视图，这是一个逻辑标识，决定了哪些服务属于组成员。当服务器离开组成员（资源或非自愿），也会创建视图。这由一个内置的动态组成员资格服务提供。&lt;/p&gt;

&lt;p&gt;在开始应用事务之前，加入者将请求组当前状态，为了获取未同步的事务，因此会与最新的副本同步。这称为分布式恢复。你可以在&lt;a href=&#34;http://mysqlhighavailability.com/distributed-recovery-behind-the-scenes/&#34;&gt; Distributed Recovery behind the scenes &lt;/a&gt; 了解详情。&lt;/p&gt;

&lt;p&gt;事务生命周期&lt;/p&gt;

&lt;p&gt;假设现在组成员都已经建立相同的初始状态，现在我们需要在所有组成员就交易事务达成一致，那就是，如果任何事务在任何成员之间提交，必须保证在其他非故障组成员也提交该事务。
对于写操作是一个非常高的要求，只读事务在本地执行查询。&lt;/p&gt;

&lt;p&gt;组通讯工具包给我们提供了一个顺序广播原语，也就是说，在顺序单相同的情况下所有的消息发送到所有成员，即便是故障的成员。也就意味着我们需要一个全局的消息序号在组内通讯，再结合事务交易的最终结果（提交或回滚）来决定保证所有成员最终达到一致状态。&lt;/p&gt;

&lt;p&gt;所以不管客户端什么时候执行写事务，它只是先在本地执行，直到真正提交才在其他成员间执行。&lt;/p&gt;

&lt;p&gt;现在我们需要决定本地指定的事务是应该提交还是回滚呢。每个成员都持有每行更新的相关联版本。这样我们就可以知道该行的版本信息在其他成员服务上是老的版本，因此并行在其他成员执行该操作。版本信息包含在执行的写事务里面。&lt;/p&gt;

&lt;p&gt;认证&lt;/p&gt;

&lt;p&gt;该决定由认证模块来执行，让我们看一个例子。&lt;/p&gt;

&lt;p&gt;在上图中，我们有一个3成员的组，一个客户端在S1上执行写事务，事务执行，直到提交阶段前，然后广播写操作和数据到组。&lt;/p&gt;

&lt;p&gt;事务写操作集由每个更新表的主键和事务执行时数据库版本组成。数据库版本由GTID_EXECUTED 提供，更准确的说，是没有间隙的连续的最后一个数。比如：GTID_EXECUTED: UUID:1-10, UUID:12, db版本是 10. 当事务提交，db version 会隐含增加。&lt;/p&gt;

&lt;p&gt;事务认证完成，也就是，每个成员都比较自身的版本信息，如果写事务的 db version 小于任意一个认证的数据库上的版本，则回滚。在 特定行的认证模块上没有版本信息，意味着还没有更新，不会引起任何事务回滚。&lt;/p&gt;

&lt;p&gt;db version 在执行时是 1（dbv:1），当前的认证模块版本也是 1 （cv:1），意味着该事务不会与任何其他进行着的事务冲突。所以事务允许被提交，认证模块行版本信息被更新为 2（cv:2）.这意味着本地的 s1 可以继续提交并返回成功给客户端。其他 s2,s3 的事务将放在队列由应用模块去应用。&lt;/p&gt;

&lt;p&gt;应用模块主要负责响应积极认证后到达的组事务，像s2,s3 。&lt;/p&gt;

&lt;p&gt;GTID 由认证模块管控，目的是为了给组所有成员相同的identifier。组成员共享相同的UUID，使得组跟single master （所有事务具有相同的UUID）一样，这里是组名称。更多的细节可以看 &lt;a href=&#34;http://mysqlhighavailability.com/getting-started-with-mysql-group-replication/&#34;&gt;Getting started with MySQL Group Replication post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;为了达到这样的效果，在分布式恢复时（一个新成员加入）认证模块状态也会被传输到新节点，再次满足DBSM要求，组的所有成员服务器必须具有相同的初始状态。&lt;/p&gt;

&lt;p&gt;让我们看一个例子，我们在事务间有冲突的事务。&lt;/p&gt;

&lt;p&gt;上图中我们依然是包含3个成员的组，s1 和 s2 分别执行事务 T1，T2（并发更新同一行），两个事务先本地执行在提交阶段之前，db version 1（dbv:1）,然后写事务和数据广播到组。&lt;/p&gt;

&lt;p&gt;组通讯工具，在这里例子里，将T1 排在 T2 前面，所以当认证模块更新行的版本 version 1（cv:1），事务将被积极认证通过，认证模块行版本 version 2（cv:2）然后所有成员的认证模块版本是 2 ，从而继续进入提交阶段。&lt;/p&gt;

&lt;p&gt;然后认证转向 T2，db version 还是 1（dbv:1）,但是认证模块的行版本信息是 2. 这也就说明该事务修改的行已经被前面通过认证的事务执行过了，所以 T2 必须消极认证，S2 将回滚事务，然后返回错误给客户端，其他成员将会忽略该事务。&lt;/p&gt;

&lt;p&gt;你可能会考虑一件事，认证模块数据会永无止境的增长，没有更多的细节？ 是的，但是我们有覆盖到，所有组成员定期交换他们的 GTID_EXECUTED 来计算他们已经提交的事务的交集 —— 稳定集合。任何组成员不能更新行版本小于已经执行的操作集合，然后执行垃圾回收器来移除所有已经属于稳定集合的行版本信息。&lt;/p&gt;

&lt;p&gt;认证模块状态可以在 performance_schema/replication_group_member_stats 表查询。&lt;/p&gt;

&lt;p&gt;server&amp;gt; select * from performance_schema.replication_group_member_stats\G
*************************** 1. row *****************************
CHANNEL_NAME: group_replication_applier
VIEW_ID: 1428497631:1
MEMBER_ID: 855060ee-3fe5-11e4-a8d9-6067203feba0
COUNT_TRANSACTIONS_IN_QUEUE: 0
COUNT_TRANSACTIONS_CHECKED: 6
COUNT_CONFLICTS_DETECTED: 1
COUNT_TRANSACTIONS_VALIDATING: 3
TRANSACTIONS_COMMITTED_ALL_MEMBERS: 8a94f357-aab4-11df-86ab-c80aa9429562:1-5
LAST_CONFLICT_FREE_TRANSACTION: 8a94f357-aab4-11df-86ab-c80aa9429562:5&lt;/p&gt;

&lt;p&gt;结论：
这只是第一步，MGR 仍然还在继续完善当中，在这片博文中我们阐述这项新复制技术的事务的生命周期，赶紧免费体验吧，然后回到社区，让我们使它变得更好。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>delete_duplicate_row</title>
      <link>https://wwcreator.github.io/2017/03/13/delete_duplicate_row/</link>
      <pubDate>Mon, 13 Mar 2017 18:09:55 -0700</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/03/13/delete_duplicate_row/</guid>
      <description>&lt;p&gt;在很多时候，我们数据库里会出现重复的数据需要去重，而今天遇到很奇怪的问题？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delete from test
where name  in (select name from test group by name having count(*) &amp;gt; 1)
and test_id not in (select min(test_id) from test group by openid having count(*) &amp;gt; 1);

OR：

delete from test 
where test_id not in (select min(test_id) from test group by name);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，很不幸，我们得到了下面的错误。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR 1093 (HY000): You can&#39;t specify target table &#39;test&#39; for update in FROM clause
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why？&lt;/p&gt;

&lt;p&gt;从错误信息来看，你不能在 FROM 定义更新的表test。那怎么办？&lt;/p&gt;

&lt;p&gt;灵机一动，恩恩，那我加一层临时表会怎样？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delete from test 
where test_id not in (select id from 
			(select min(test_id) id from test group by name)
		     temp);
Query OK, 17 rows affected (0.02 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;oooh,Amazing, 但是还是不太清楚MySQL解析该SQL 的原理，后续再补充，此文作为操作记录。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL 常用备份工具简介</title>
      <link>https://wwcreator.github.io/2017/02/14/mysql-%E5%B8%B8%E7%94%A8%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 14 Feb 2017 21:11:31 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/14/mysql-%E5%B8%B8%E7%94%A8%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</guid>
      <description>

&lt;h1 id=&#34;mysql-常用的备份方式有哪些&#34;&gt;MySQL 常用的备份方式有哪些 ?&lt;/h1&gt;

&lt;p&gt;不管是MySQL, Oracle，MariaDB 等关系型数据库，还是 MongoDB，Redis 等 NoSQL 数据库，都有众所周知的&lt;code&gt;Logical Backup&lt;/code&gt; &amp;amp;  &lt;code&gt;Physical Backup&lt;/code&gt; 。&lt;/p&gt;

&lt;h2 id=&#34;mysql-logical-backups&#34;&gt;MySQL Logical Backups&lt;/h2&gt;

&lt;p&gt;逻辑备份是按照数据库的逻辑结构（CREATE DATABASE, CREATE TABLE 语句）和内容（INSERT,分隔文本）的方式来存储。非常常用的是当属 MySQL 自带的 &lt;code&gt;mysqldump&lt;/code&gt;和 &lt;code&gt;mydumper&lt;/code&gt; 工具。&lt;/p&gt;

&lt;h3 id=&#34;mysqldump&#34;&gt;mysqldump&lt;/h3&gt;

&lt;p&gt;mysqldump 支持导出部分DB，部分Table， 而且还支持 &amp;ndash;where 行条件过滤（不支持列过滤），InnoDB引擎不锁表导出等。还支持获取导出的 Binlog position，很方便的进行PIT（point in time）recover。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for example:
  mysqldump -u test -p -P 3307 -h 127.0.0.1 --single-transaction --master-data=2 --database test_dump --tables test1 &amp;gt; /test/test_dump_test1.sql

recover：
  mysql -u test -p -P 3307 -h 127.0.0.1 -D test_dump -e &amp;quot;source /test/test_dump_test1.sql&amp;quot; &amp;gt;import.log 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PS: MySQL 5.7.11 版本引入 mysqlpump 工具，支持多线程（粒度到表级别），压缩导入导出。
mysqlpump的并行导出功能的架构为：队列+线程，允许有多个队列，每个队列下有多个线程，而一个队列可以绑定1个或者多个数据库。但是，对于每张表的导出只能是单个线程的。&lt;/p&gt;

&lt;h3 id=&#34;mydumper&#34;&gt;mydumper&lt;/h3&gt;

&lt;p&gt;mydumper（&amp;amp;myloader）是用于对MySQL数据库进行多线程备份和恢复的开源 (GNU GPLv3)工具。开发人员主要来自MySQL、Facebook和SkySQL公司，目前由Percona公司开发和维护。
mydumper 支持多线程备份恢复，粒度到记录级别，对于导出大容量的数据，效率非常高。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for example:
  mydumper -u test -p -P 3307 -h 127.0.0.1 -B test_dump -T test1 -b -t 16 -c -o /test/test_dump_test1
recover:
  myloader -u test -p -P 3307 -h 127.0.0.1 --directory=/test/test_dump_test1 --overwrite-tables -B test_dump
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;备份原理：
  - 主线程将各个库表，分成若干个任务，放入任务队列
  - 执行线程从任务队列读取任务，并执行。&lt;/p&gt;

&lt;h2 id=&#34;mysql-physical-backups&#34;&gt;MySQL Physical Backups&lt;/h2&gt;

&lt;p&gt;物理备份由一系列的存储数据库内容的 raw 格式的文件组成，为了保证一致性，必须关机来拷贝物理文件，但是 Percona 公司的 Xtrabackup 工具完美的解决了关机备份的不可行方案，从而实现热备。&lt;/p&gt;

&lt;h3 id=&#34;xtrabackup&#34;&gt;Xtrabackup&lt;/h3&gt;

&lt;p&gt;Xtrabackup 有两个主要的工具，xtrabackup，innobackup：
- xtrabackup 只能备份 InnoDB 和 XtraDB 两种数据表
- innobackupex 封装了 xtrabackup，同时可以备份 MyISAM 数据表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for example:
  第一步：
  innobackupex --user=bkpuser  --password=bkppassword /data/backups
  第二步：
  cd /data/backups
  innobackupex --apply-log ./
recover:
  将备份拷贝到需要的目录即可使用。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;备份的原理：
1. Xtrabackup ：
   - REDO 拷贝线程， 拷贝 REDO Log
   - ibd 拷贝线程 拷贝 InnoDB 物理文件
2. 完成后，执行 FTWRL 添加全局锁
3. 拷贝 frm，MYD,MYI etc.
4. 停止拷贝 REDO ,UNLOCK tables
5. 等待 xtrabackup 结束，备份结束&lt;/p&gt;

&lt;h2 id=&#34;mysqldump-pk-mydumper&#34;&gt;mysqldump PK mydumper&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;mysqldump 为 MySQL 原生工具，不需要额外安装，对于导出不是特别大的DB，仍然是非常棒的工具，但对于容量大，但又必须逻辑导出的场景就不是特别合适，需要的时间特别长，不支持多线程导入导出。&lt;/li&gt;
&lt;li&gt;mydumper 需要额外安装才能使用，支持多线程备份导入，速度快，支持后台模式导出&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;logical-pk-physical-backup&#34;&gt;Logical PK Physical Backup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;逻辑备份可以灵活的导出数据（表结构，数据，过滤等）&lt;/li&gt;
&lt;li&gt;逻辑备份与物理备份导出所有数据来看，要慢很多，因为需要读取数据并转换&lt;/li&gt;
&lt;li&gt;逻辑备份的恢复时间长&lt;/li&gt;
&lt;li&gt;物理备份的文件与线上 MySQL 完全一致，包含所有的日志等信息&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>