<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>户枢不蠹</title>
    <link>https://wwcreator.github.io/</link>
    <description>Recent content on 户枢不蠹</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>yuwen_qing@126.com (wwcreator)</managingEditor>
    <webMaster>yuwen_qing@126.com (wwcreator)</webMaster>
    <copyright>(c) 2017 wwcreator.</copyright>
    <lastBuildDate>Tue, 14 Mar 2017 18:22:41 -0700</lastBuildDate>
    <atom:link href="https://wwcreator.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL Group Replication – Transaction life cycle explained</title>
      <link>https://wwcreator.github.io/2017/03/14/mysql-group-replication--transaction-life-cycle-explained/</link>
      <pubDate>Tue, 14 Mar 2017 18:22:41 -0700</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/03/14/mysql-group-replication--transaction-life-cycle-explained/</guid>
      <description>&lt;p&gt;MySQL Group Replication – Transaction life cycle explained&lt;/p&gt;

&lt;p&gt;MySQL Group Replication - 事务生命周期分析&lt;/p&gt;

&lt;p&gt;MySQL multi master 插件来了，MGR 可以实现在任何 MySQL 成员进行同步更新，冲突处理，成员自动管理和成员故障检测。&lt;/p&gt;

&lt;p&gt;为了更好的理解 MGR 的工作原理，我们将在这篇文章里分析事务的生命周期和组件之间的相互作用，但是在开始之前，我们需要先理解什么是 Group .&lt;/p&gt;

&lt;p&gt;组通讯工具包
多主插件由组通讯工具包支撑，它决定了哪些 MySQL 属于组成员，执行故障检测和提供服务消息。有序消息队列不可思议的是，允许数据在所有成员之间是一致的。你可以在&lt;a href=&#34;http://mysqlhighavailability.com/group-communication-behind-the-scenes/&#34;&gt;Group communication&lt;/a&gt; 这篇文章中详细了解。&lt;/p&gt;

&lt;p&gt;这些强大的属性，加上每个服务器的初始化状态相同，我们就能实现数据库状态机复制。&lt;/p&gt;

&lt;p&gt;除了组通讯系统的内容，剩下的基本概念是视图。当一个MySQL服务器加入到组，就会创建一个新的视图，这是一个逻辑标识，决定了哪些服务属于组成员。当服务器离开组成员（资源或非自愿），也会创建视图。这由一个内置的动态组成员资格服务提供。&lt;/p&gt;

&lt;p&gt;在开始应用事务之前，加入者将请求组当前状态，为了获取未同步的事务，因此会与最新的副本同步。这称为分布式恢复。你可以在&lt;a href=&#34;http://mysqlhighavailability.com/distributed-recovery-behind-the-scenes/&#34;&gt; Distributed Recovery behind the scenes &lt;/a&gt; 了解详情。&lt;/p&gt;

&lt;p&gt;事务生命周期&lt;/p&gt;

&lt;p&gt;假设现在组成员都已经建立相同的初始状态，现在我们需要在所有组成员就交易事务达成一致，那就是，如果任何事务在任何成员之间提交，必须保证在其他非故障组成员也提交该事务。
对于写操作是一个非常高的要求，只读事务在本地执行查询。&lt;/p&gt;

&lt;p&gt;组通讯工具包给我们提供了一个顺序广播原语，也就是说，在顺序单相同的情况下所有的消息发送到所有成员，即便是故障的成员。也就意味着我们需要一个全局的消息序号在组内通讯，再结合事务交易的最终结果（提交或回滚）来决定保证所有成员最终达到一致状态。&lt;/p&gt;

&lt;p&gt;所以不管客户端什么时候执行写事务，它只是先在本地执行，直到真正提交才在其他成员间执行。&lt;/p&gt;

&lt;p&gt;现在我们需要决定本地指定的事务是应该提交还是回滚呢。每个成员都持有每行更新的相关联版本。这样我们就可以知道该行的版本信息在其他成员服务上是老的版本，因此并行在其他成员执行该操作。版本信息包含在执行的写事务里面。&lt;/p&gt;

&lt;p&gt;认证&lt;/p&gt;

&lt;p&gt;该决定由认证模块来执行，让我们看一个例子。&lt;/p&gt;

&lt;p&gt;在上图中，我们有一个3成员的组，一个客户端在S1上执行写事务，事务执行，直到提交阶段前，然后广播写操作和数据到组。&lt;/p&gt;

&lt;p&gt;事务写操作集由每个更新表的主键和事务执行时数据库版本组成。数据库版本由GTID_EXECUTED 提供，更准确的说，是没有间隙的连续的最后一个数。比如：GTID_EXECUTED: UUID:1-10, UUID:12, db版本是 10. 当事务提交，db version 会隐含增加。&lt;/p&gt;

&lt;p&gt;事务认证完成，也就是，每个成员都比较自身的版本信息，如果写事务的 db version 小于任意一个认证的数据库上的版本，则回滚。在 特定行的认证模块上没有版本信息，意味着还没有更新，不会引起任何事务回滚。&lt;/p&gt;

&lt;p&gt;db version 在执行时是 1（dbv:1），当前的认证模块版本也是 1 （cv:1），意味着该事务不会与任何其他进行着的事务冲突。所以事务允许被提交，认证模块行版本信息被更新为 2（cv:2）.这意味着本地的 s1 可以继续提交并返回成功给客户端。其他 s2,s3 的事务将放在队列由应用模块去应用。&lt;/p&gt;

&lt;p&gt;应用模块主要负责响应积极认证后到达的组事务，像s2,s3 。&lt;/p&gt;

&lt;p&gt;GTID 由认证模块管控，目的是为了给组所有成员相同的identifier。组成员共享相同的UUID，使得组跟single master （所有事务具有相同的UUID）一样，这里是组名称。更多的细节可以看 &lt;a href=&#34;http://mysqlhighavailability.com/getting-started-with-mysql-group-replication/&#34;&gt;Getting started with MySQL Group Replication post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;为了达到这样的效果，在分布式恢复时（一个新成员加入）认证模块状态也会被传输到新节点，再次满足DBSM要求，组的所有成员服务器必须具有相同的初始状态。&lt;/p&gt;

&lt;p&gt;让我们看一个例子，我们在事务间有冲突的事务。&lt;/p&gt;

&lt;p&gt;上图中我们依然是包含3个成员的组，s1 和 s2 分别执行事务 T1，T2（并发更新同一行），两个事务先本地执行在提交阶段之前，db version 1（dbv:1）,然后写事务和数据广播到组。&lt;/p&gt;

&lt;p&gt;组通讯工具，在这里例子里，将T1 排在 T2 前面，所以当认证模块更新行的版本 version 1（cv:1），事务将被积极认证通过，认证模块行版本 version 2（cv:2）然后所有成员的认证模块版本是 2 ，从而继续进入提交阶段。&lt;/p&gt;

&lt;p&gt;然后认证转向 T2，db version 还是 1（dbv:1）,但是认证模块的行版本信息是 2. 这也就说明该事务修改的行已经被前面通过认证的事务执行过了，所以 T2 必须消极认证，S2 将回滚事务，然后返回错误给客户端，其他成员将会忽略该事务。&lt;/p&gt;

&lt;p&gt;你可能会考虑一件事，认证模块数据会永无止境的增长，没有更多的细节？ 是的，但是我们有覆盖到，所有组成员定期交换他们的 GTID_EXECUTED 来计算他们已经提交的事务的交集 —— 稳定集合。任何组成员不能更新行版本小于已经执行的操作集合，然后执行垃圾回收器来移除所有已经属于稳定集合的行版本信息。&lt;/p&gt;

&lt;p&gt;认证模块状态可以在 performance_schema/replication_group_member_stats 表查询。&lt;/p&gt;

&lt;p&gt;server&amp;gt; select * from performance_schema.replication_group_member_stats\G
*************************** 1. row *****************************
CHANNEL_NAME: group_replication_applier
VIEW_ID: 1428497631:1
MEMBER_ID: 855060ee-3fe5-11e4-a8d9-6067203feba0
COUNT_TRANSACTIONS_IN_QUEUE: 0
COUNT_TRANSACTIONS_CHECKED: 6
COUNT_CONFLICTS_DETECTED: 1
COUNT_TRANSACTIONS_VALIDATING: 3
TRANSACTIONS_COMMITTED_ALL_MEMBERS: 8a94f357-aab4-11df-86ab-c80aa9429562:1-5
LAST_CONFLICT_FREE_TRANSACTION: 8a94f357-aab4-11df-86ab-c80aa9429562:5&lt;/p&gt;

&lt;p&gt;结论：
这只是第一步，MGR 仍然还在继续完善当中，在这片博文中我们阐述这项新复制技术的事务的生命周期，赶紧免费体验吧，然后回到社区，让我们使它变得更好。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How_Google_Works</title>
      <link>https://wwcreator.github.io/2017/03/14/how_google_works/</link>
      <pubDate>Tue, 14 Mar 2017 00:04:06 -0700</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/03/14/how_google_works/</guid>
      <description>&lt;p&gt;维格曼斯（wegmans）:“用心才能成就成功的企业。我们的员工都心怀这种愿景，尽心竭力，不让顾客离开时不开心。我们也依此做决定，善待员工，不计成本。”&lt;/p&gt;

&lt;p&gt;如果不负责软硬兼施执行这些大棒加胡萝卜的手段，一名管理者到底该做些什么呢？只有一件事情可以做，按照执行总裁 埃里克.施密特的话就是“管理者服务于团队”。&lt;/p&gt;

&lt;p&gt;人的一生大部分时间都在工作，但是对多数人而言，工作是一件痛苦的事情，只是一种谋生的手段，可以不必如此的。&lt;/p&gt;

&lt;p&gt;我们无法给出所有问题的答案，但是却有一些值得深入体味的发现，如何更好地探寻和发展自由、富有创造力和宽松的环境，使员工在这种环境下工作。&lt;/p&gt;

&lt;p&gt;传奇故事有千万种，但却如此相似。神话学者约瑟夫.坎贝尔认为，全世界绝大多数神话故事都可以归结到很少的几个原型故事上。我们受到召唤去冒险，经历了各种试炼，变得更明智，最后云淡风轻，心平气和。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Growth_Hacker</title>
      <link>https://wwcreator.github.io/2017/03/14/growth_hacker/</link>
      <pubDate>Tue, 14 Mar 2017 00:02:45 -0700</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/03/14/growth_hacker/</guid>
      <description>

&lt;p&gt;增长黑客手册&lt;/p&gt;

&lt;h2 id=&#34;什么是增长黑客:4ade180de9b1a3277afb3c1de5badef0&#34;&gt;什么是增长黑客？&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;增长黑客是在2010年被 Sean Ellis 提出，是将增长作为唯一目标的人，他做的事情都是围绕如何扩大增长而开展。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然传统的市场销售人员也关注增长，但是与增长黑客的绝对关注相比较，两者还是有本质的区别。增长黑客必须将增长目标和解决方案紧密结合，除了采用已经被证明的方案，还要有创造力去探寻促进增长的新思路。&lt;/p&gt;

&lt;p&gt;他认为增长黑客工作的核心就是测试！需要分析现状提出自己的想法，然后给这些想法排优先级，通过快速测试和分析找到驱动增长的因素。这个过程是可以不断重复的，重复的速度越快，我们就能找到更多的增长方案，增长速度也就越快。&lt;/p&gt;

&lt;p&gt;Andrew Chen 的一篇博文 《Growth Hacker is the new VP Marketing》说道：
    增长黑客是市场营销人员和工程技术人员的混血儿，他们着眼于「产品该如何获取用户」等传统问题，并通过A/B测试、落地页、病毒营销、邮件营销等方式来解决。&lt;/p&gt;

&lt;p&gt;2015年，范冰出版的《增长黑客》迅速在国内推广，从海盗指标AARRR五个方面详细介绍国内外的增长黑客的实践案例。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;增长黑客, 是一群以数据驱动营销，以市场指导产品，通过技术化手段贯彻增长目标的人。他们通常既了解技术，又深谙用户心理，擅长发挥创意，绕过限制，通过低成本的手段解决初创公司产品早期的增长问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;张溪梦认为：增长黑客是集市场营销、产品营销、数据分析三个角色的聚合。核心是以最快的方法、最低的成本、最高效的手段获取大量的增长。&lt;/p&gt;

&lt;p&gt;案例分析：如何提高用户留存&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一步：设定增长目标&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第二步：确定聚焦领域&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第三步：排序各种各样的试验想法&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第四步：设计上线试验和A/B测试&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第五步：分析应用结果&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;增长黑客的「海盗法则」 AARRR 模型。获取，激活，留存，盈利，推荐&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>delete_duplicate_row</title>
      <link>https://wwcreator.github.io/2017/03/13/delete_duplicate_row/</link>
      <pubDate>Mon, 13 Mar 2017 18:09:55 -0700</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/03/13/delete_duplicate_row/</guid>
      <description>&lt;p&gt;在很多时候，我们数据库里会出现重复的数据需要去重，而今天遇到很奇怪的问题？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delete from test
where name  in (select name from test group by name having count(*) &amp;gt; 1)
and test_id not in (select min(test_id) from test group by openid having count(*) &amp;gt; 1);

OR：

delete from test 
where test_id not in (select min(test_id) from test group by name);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，很不幸，我们得到了下面的错误。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR 1093 (HY000): You can&#39;t specify target table &#39;test&#39; for update in FROM clause
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why？&lt;/p&gt;

&lt;p&gt;从错误信息来看，你不能在 FROM 定义更新的表test。那怎么办？&lt;/p&gt;

&lt;p&gt;灵机一动，恩恩，那我加一层临时表会怎样？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delete from test 
where test_id not in (select id from 
			(select min(test_id) id from test group by name)
		     temp);
Query OK, 17 rows affected (0.02 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;oooh,Amazing, 但是还是不太清楚MySQL解析该SQL 的原理，后续再补充，此文作为操作记录。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>transcripts</title>
      <link>https://wwcreator.github.io/2017/03/10/transcripts/</link>
      <pubDate>Fri, 10 Mar 2017 18:53:30 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/03/10/transcripts/</guid>
      <description>&lt;p&gt;larry page:&lt;/p&gt;

&lt;p&gt;未来有无限可能，我们也许只把握住了其中的百分之一。相对于我们的潜能，我们的行动仍然缓慢。原因之一就是长久以来的消极性。人们总说谷歌在对抗其他公司，这并不有趣。我们应该专注的，是开发目前并不存在的伟大产品。
  &amp;laquo;未来应该是什么样子，我致力去发现它，实现它。&amp;raquo; 2015年在拉里办公室会面如是说。&lt;/p&gt;

&lt;p&gt;管理团队总被一系列短期的目标困扰，这就像节食的人每半个小时称一次体重，毫无意义。&lt;/p&gt;

&lt;p&gt;拉里一再批判世人普遍缺乏雄心壮志。“他们看上去没有耐心，容易放弃。”他说，“人们真正会犯的错误只有一个，那就是失去冒险精神。”&lt;/p&gt;

&lt;p&gt;我们正处于一片未知的领域，目前的问题在于我们该如何利用所有的资源，并对世界产生积极影响。&lt;/p&gt;

&lt;p&gt;我们必须变得更加乐观。&lt;/p&gt;

&lt;p&gt;彼得蒂尔所说：世界上极少数人在思考诸如‘发生什么事情才会让世界变得更好’这样的问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>booklist</title>
      <link>https://wwcreator.github.io/2017/03/10/booklist/</link>
      <pubDate>Fri, 10 Mar 2017 18:43:55 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/03/10/booklist/</guid>
      <description>&lt;p&gt;最负盛名的经济学家史蒂芬.列维特所著的《魔鬼经济学》；
近25年来最顶级的25位商业领袖比尔.乔治所著的《真北》和《卓越领导的七项修炼》；
全球高级领导者教练的先驱和权威马歇尔.古德史密斯所著的《魔鬼管理学》和《魔劲》；
克林顿首席谈判顾问罗杰.道森所著的《优势谈判》系列作品；
最伟大的商业管理思想家肯布兰佳所著的《知道做到》；
现代营销学大师赛斯.高丁所著的《小就是大》；
普利策奖获得者蒂姆.韦纳所著的《中情局罪与罚》；
普利策奖获得者大卫.哈伯斯塔姆所著的《最寒冷的冬天》；
巴菲特的老师菲利普.费雪所著的《股市投资致富之道》；
《一个经济杀手的自白》《未来100年大预言》《未来10年》《看谁在说谎》等&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo_悬浮回到顶部</title>
      <link>https://wwcreator.github.io/2017/02/24/hugo_%E6%82%AC%E6%B5%AE%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/</link>
      <pubDate>Fri, 24 Feb 2017 10:31:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/24/hugo_%E6%82%AC%E6%B5%AE%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/</guid>
      <description>

&lt;h3 id=&#34;step-1-下载喜欢的-回到顶部-素材:d18922e4a07ddb4e2d0eedde523f9303&#34;&gt;Step 1. 下载喜欢的「回到顶部」素材&lt;/h3&gt;

&lt;p&gt;在网上搜索自己喜欢的素材图片，我的图片是&lt;a href=&#34;https://tmhm.github.io&#34;&gt;@well&lt;/a&gt; 制作的。&lt;img src=&#34;https://wwcreator.github.io/media/top21.png&#34; alt=&#34;back_to_top&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-2-针对-hyde-y-主题更改-回到顶部:d18922e4a07ddb4e2d0eedde523f9303&#34;&gt;Step 2. 针对 hyde-y 主题更改「回到顶部」&lt;/h3&gt;

&lt;h4 id=&#34;创建-jquery-min-js-文件:d18922e4a07ddb4e2d0eedde523f9303&#34;&gt;创建 jquery.min.js 文件&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;[下载](https://wwcreator.github.io/js/jquery.min.js)
将文件放置在 your_site_name/theme/hyde-y/static/js/ 目录。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;放置素材:d18922e4a07ddb4e2d0eedde523f9303&#34;&gt;放置素材&lt;/h4&gt;

&lt;p&gt;将素材图片放置在 your_site_name/theme/hyde-y/static/ 目录。&lt;/p&gt;

&lt;h4 id=&#34;引入样式:d18922e4a07ddb4e2d0eedde523f9303&#34;&gt;引入样式&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;vi your_site_name/theme/hyde-y/layouts/partials/modules/site/link/top.html&lt;/code&gt; 将下面的内容替换到该文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#引入jquery
&amp;lt;script src=&amp;quot;/js/jquery.min.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
#控制
&amp;lt;script&amp;gt;
        $(window).on(&amp;quot;scroll&amp;quot;,function(e){
        if($(&#39;body&#39;).scrollTop() &amp;gt;= 400  ){
                $(&#39;#gotop&#39;).show();


        }else{
                $(&#39;#gotop&#39;).hide();
        }
});
&amp;lt;/script&amp;gt;
&amp;lt;div class=&amp;quot;ctrolPanel&amp;quot; id=&amp;quot;gotop&amp;quot; style=&amp;quot;display:none;width:50px;height:50px;position:fixed;right:25px;top:85%;overflow:hidden;z-index:10000;&amp;quot;&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;&amp;lt;img title=&amp;quot;返回顶部&amp;quot; src=&amp;quot;/top21.png&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成上述步骤后，就可以使用悬浮「回到顶部」。这个折腾了一阵子，一直没有悬浮的效果，是静止的在页面。后面发现少了 jQuery，引入 jQuery 文件后，就可以通过 jQuery 实现悬浮的效果。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>博客园迁移到Hugo</title>
      <link>https://wwcreator.github.io/2017/02/22/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%BF%81%E7%A7%BB%E5%88%B0hugo/</link>
      <pubDate>Wed, 22 Feb 2017 13:16:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/22/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%BF%81%E7%A7%BB%E5%88%B0hugo/</guid>
      <description>

&lt;p&gt;对于早期的很多用户来说，一直在博客园上写自己的博文，但是慢慢的，大家开始都有自己的专属 Blog 了，那之前的 Post 肿么办呢？&lt;/p&gt;

&lt;p&gt;来，我教你。&lt;/p&gt;

&lt;h2 id=&#34;备份博客园数据&#34;&gt;备份博客园数据&lt;/h2&gt;

&lt;p&gt;备份这件小事，应该难不倒你，但是博客园有限制，工作日在「08:00-18:00」,不能备份，所以备份需要挑时间的喔。备份生成的是一份 XML 格式的文件，下一步，continue 。&lt;/p&gt;

&lt;h3 id=&#34;解析-xml-文件的内容&#34;&gt;解析 XML 文件的内容&lt;/h3&gt;

&lt;h4 id=&#34;注意&#34;&gt;注意：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;备份的 XML 没有美化成标准的 XML 格式，所以需要去网站上搜索进行 XML 格式美化再保存替换。&lt;/li&gt;
&lt;li&gt;博文的内容被 &lt;code&gt;&amp;lt;![CDATA[&lt;/code&gt; &lt;code&gt;]]&lt;/code&gt; 包含，如果不指定获取所有内容参数，则会被解析忽略。&lt;/li&gt;
&lt;li&gt;生成 MD 文档 front matter 为 TOML 格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面看姐的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*-

import os
from xml.dom.minidom import parse
import sys
reload(sys)
sys.setdefaultencoding(&#39;utf-8&#39;)

BACKUP_FILE = &#39;CNBlogs_BlogBackup_131_201602_201702_2.xml&#39;
DOMTree = parse(BACKUP_FILE)
root = DOMTree.documentElement
blog_title = root.getElementsByTagName(&#39;title&#39;)[0].childNodes[0].data
if not os.path.isdir(blog_title):
    os.mkdir(blog_title)

blogs = root.getElementsByTagName(&#39;item&#39;)

tag = [&#39;算法&#39;,&#39;C++&#39;, &#39;git&#39;, &#39;GPU&#39;, &#39;驾驶&#39;, &#39;DL&#39;, &#39;TORCS&#39;, &#39;服务器&#39; ,&#39;codility&#39; ,&#39;编译器&#39; ,&#39;python&#39; ,&#39;机器&#39;,&#39;强化&#39;,&#39;配置&#39;,&#39;ubuntu&#39;]


for blog in blogs:
    try:
        title = blog.getElementsByTagName(&#39;title&#39;)[0].childNodes[0].data
        origin_link = blog.getElementsByTagName(&#39;link&#39;)[0].childNodes[0].data
        date = blog.getElementsByTagName(&#39;pubDate&#39;)[0].childNodes[0].data
        # content = blog.getElementsByTagName(&#39;description&#39;)[0].childNodes[0].data
        content = blog.getElementsByTagName(&#39;description&#39;)[0].firstChild.wholeText
        #categories
        for test in tag:
            if title.find(test) != -1:
                categories = test
                break
            else:
                categories = &#39;Life&#39;
        with open(blog_title + os.sep + title + &#39;.md&#39;, &#39;w&#39;) as f:
            f.write(&#39;+++ \n&#39;)
            f.write(&#39;title = &amp;quot;%s&amp;quot; \n&#39; % title)
            f.write(&#39;date = &amp;quot;%s&amp;quot; \n&#39; % date)
            f.write(&#39;categories = [&amp;quot;%s&amp;quot;] \n&#39; % categories)
            f.write(&#39;+++ \n&#39;)
            f.write(content)
            f.write(&#39;\n\n&#39;)
            f.close()
    except Exception, e:
        print e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行该脚本，会生成所有的博文。拷贝到 Hugo 的content/post/ 目录，在本地预览效果吧，如果没有问题就 &lt;code&gt;Push&lt;/code&gt; 到 &lt;code&gt;Github&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;结束语&#34;&gt;结束语&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用这样是获取不到数据：&lt;code&gt;content = blog.getElementsByTagName(&#39;description&#39;)[0].childNodes[0].data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需要使用 wholeText 来读取&lt;code&gt;&amp;lt;![CDATA[&lt;/code&gt; &lt;code&gt;]]&lt;/code&gt;里的内容。
&lt;code&gt;content = blog.getElementsByTagName(&#39;description&#39;)[0].firstChild.wholeText&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo 搭建博客注意事项</title>
      <link>https://wwcreator.github.io/2017/02/22/hugo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Wed, 22 Feb 2017 12:11:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/22/hugo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>

&lt;h3 id=&#34;标题不能使用-号:e3d4e8203f1f66ba4b5837ed21246063&#34;&gt;标题不能使用 + 号&lt;/h3&gt;

&lt;p&gt;在v0.18 mac 版本中，如果 &lt;code&gt;title&lt;/code&gt; 包含 &lt;code&gt;+&lt;/code&gt; ，虽然不报任何错误，但是不会生成具体的静态页面。&lt;/p&gt;

&lt;h3 id=&#34;将-back-to-top-改成-回到顶部:e3d4e8203f1f66ba4b5837ed21246063&#34;&gt;将 back to top 改成 「回到顶部」&lt;/h3&gt;

&lt;p&gt;vi &lt;code&gt;themes/hyde-y/data/Strings.yaml&lt;/code&gt;
将 「back to top」改成 「回到顶部」。&lt;/p&gt;

&lt;h3 id=&#34;hugo-怎么插入本地-image:e3d4e8203f1f66ba4b5837ed21246063&#34;&gt;hugo 怎么插入本地 image&lt;/h3&gt;

&lt;p&gt;之前一直不知道怎么插入image，不知道 hugo 是怎么引用的，后续了解到，在site 的目录下的 static 下就是存储的静态文件，我们创建 media 目录存放图片等媒体文件，引用的话，直接「/media/xxx.png」 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;注意：&lt;/em&gt;&lt;/strong&gt; 不要使用 xxx.PNG 这样的大写后缀，生成的静态页面为小写后缀，然后出现找不到该 Image。&lt;/p&gt;

&lt;h3 id=&#34;hugo-content-顶部添加-preview-next:e3d4e8203f1f66ba4b5837ed21246063&#34;&gt;hugo content 顶部添加 preview、next&lt;/h3&gt;

&lt;p&gt;vi &lt;code&gt;themes/hyde-y/layouts/post/single.hat.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;&amp;lt;/header&amp;gt;&lt;/code&gt;前添加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;br/&amp;gt;
{{ partial &amp;quot;bloc/content/navigation&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;google-baidu-完全搜索不到博文:e3d4e8203f1f66ba4b5837ed21246063&#34;&gt;google，baidu 完全搜索不到博文&lt;/h3&gt;

&lt;p&gt;因为google，baidu 还没有收录我们的URL，所以在google 里输入：site:网址URL 如果能搜索出来则说明，google 已经添加我们的网址。不能则需要提交网址到 google。百度同理。
&lt;a href=&#34;https://www.google.com/webmasters/tools/home&#34;&gt;https://www.google.com/webmasters/tools/home&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hugo-不支持站内搜索:e3d4e8203f1f66ba4b5837ed21246063&#34;&gt;Hugo 不支持站内搜索&lt;/h3&gt;

&lt;h3 id=&#34;hugo-还不支持生成目录树:e3d4e8203f1f66ba4b5837ed21246063&#34;&gt;Hugo 还不支持生成目录树&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>定制主题 &amp; hyde-y</title>
      <link>https://wwcreator.github.io/2017/02/22/%E5%AE%9A%E5%88%B6%E4%B8%BB%E9%A2%98--hyde-y/</link>
      <pubDate>Wed, 22 Feb 2017 10:11:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/22/%E5%AE%9A%E5%88%B6%E4%B8%BB%E9%A2%98--hyde-y/</guid>
      <description>

&lt;p&gt;在前面的&lt;a href=&#34;https://wwcreator.github.io/2017/02/14/%E4%BD%BF%E7%94%A8-hugo--github-page-%E6%90%AD%E5%BB%BA-blog/&#34;&gt;「使用 Hugo + GitHub Page 搭建 Blog」&lt;/a&gt; 文章中详细的说明搭建blog 的组成元素，「hugo」,「GitHub Page」,[Theme]，这篇文章是前面文章的续写，聊聊更改主题样式这件事。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hyde-y/
├── archetypes
│   └── default.md
├── data
│   ├── Formats.yaml
│   ├── Modules.toml
│   └── Strings.yaml
├── Gruntfile.js
├── images
│   ├── screenshot.png
│   └── tn.png
├── layouts
│   ├── 404.html
│   ├── code
│   │   ├── section.li.html
│   │   ├── single.hat.html
│   │   └── summary.hat.html
│   ├── _default
│   │   ├── list.html
│   │   ├── list.li.html
│   │   ├── section.html
│   │   ├── section.li.html
│   │   ├── single.boot.html
│   │   ├── single.content.html
│   │   ├── single.hat.html
│   │   ├── single.html
│   │   ├── summary.boot.html
│   │   ├── summary.content.html
│   │   ├── summary.hat.html
│   │   ├── summary.html
│   │   └── terms.html
│   ├── index.html
│   ├── partials
│   │   ├── base
│   │   │   ├── footer.html
│   │   │   ├── header.html
│   │   │   ├── imports.html
│   │   │   ├── metas.html
│   │   │   └── scripts.html
│   │   ├── bloc
│   │   │   ├── content
│   │   │   │   ├── badges.html
│   │   │   │   ├── comments.html
│   │   │   │   ├── content.html
│   │   │   │   ├── h1-link-title.html
│   │   │   │   ├── h1-title.html
│   │   │   │   ├── h2-link-title.html
│   │   │   │   ├── h2-title.html
│   │   │   │   ├── lastupdate.html
│   │   │   │   ├── link-title.html
│   │   │   │   ├── metas.html
│   │   │   │   ├── navigation.html
│   │   │   │   ├── pagination.html
│   │   │   │   ├── readlink.html
│   │   │   │   └── summary.html
│   │   │   ├── footer
│   │   │   │   ├── credits_copyright.html
│   │   │   │   ├── credits_footline.html
│   │   │   │   ├── credits.html
│   │   │   │   └── nav.html
│   │   │   └── header
│   │   │       ├── brand.html
│   │   │       ├── brand_title.html
│   │   │       ├── brand_topline.html
│   │   │       ├── nav.html
│   │   │       ├── nav_primary.html
│   │   │       └── nav_secondary.html
│   │   ├── error-404.html
│   │   ├── footer-extra.html
│   │   ├── foot-extra.html
│   │   ├── foot.html
│   │   ├── header-extra.html
│   │   ├── head-extra.html
│   │   ├── head.html
│   │   ├── homepage.html
│   │   └── modules
│   │       ├── disqus.html
│   │       ├── flattr.html
│   │       ├── github-ribbon.html
│   │       ├── hugo-version.html
│   │       ├── page
│   │       │   ├── badges.html
│   │       │   ├── date.html
│   │       │   ├── labels.html
│   │       │   ├── link
│   │       │   │   ├── read.html
│   │       │   │   └── title.html
│   │       │   ├── navigation.html
│   │       │   ├── summary.html
│   │       │   ├── tags.html
│   │       │   └── title.html
│   │       └── site
│   │           ├── brand.html
│   │           ├── copyright.html
│   │           ├── footline.html
│   │           ├── lastupdate.html
│   │           ├── link
│   │           │   ├── base.html
│   │           │   ├── footmenu.html
│   │           │   ├── home.html
│   │           │   ├── menu.html
│   │           │   ├── social
│   │           │   │   ├── bitbucket.html
│   │           │   │   ├── email.html
│   │           │   │   ├── facebook.html
│   │           │   │   ├── flickr.html
│   │           │   │   ├── github.html
│   │           │   │   ├── googleplus.html
│   │           │   │   ├── linkedin.html
│   │           │   │   ├── rss.html
│   │           │   │   ├── twitch.html
│   │           │   │   ├── twitter.html
│   │           │   │   ├── vimeo.html
│   │           │   │   └── youtube.html
│   │           │   ├── social.html
│   │           │   └── top.html
│   │           ├── pagination.html
│   │           └── topline.html
│   ├── post
│   │   ├── single.boot.html
│   │   ├── single.hat.html
│   │   ├── summary.boot.html
│   │   └── summary.hat.html
│   ├── section
│   │   └── code.html
│   ├── shortcodes
│   │   ├── alert.html
│   │   └── labels.html
│   └── taxonomy
│       ├── topic.html
│       └── topic.terms.html
├── LICENSE
├── package.json
├── README.md
├── scss
│   ├── _00-config.less
│   ├── _01-base.less
│   ├── _02-layout.less
│   ├── _03-modules.less
│   ├── _04-themes.less
│   ├── _05-alerts.less
│   ├── knacss
│   │   ├── _00-config.less
│   │   ├── _01a-normalize.less
│   │   ├── _01b-base.less
│   │   ├── _02-layout.less
│   │   ├── _03-grids.less
│   │   ├── _04-tables.less
│   │   ├── _05-forms.less
│   │   ├── _06-helpers.less
│   │   ├── _07-responsive.less
│   │   ├── _08-print.less
│   │   ├── _09-misc.less
│   │   ├── _10-styling.less
│   │   ├── _11-wordpress.less
│   │   └── knacss.less
│   └── style.less
├── static
│   ├── css
│   │   ├── font-awesome.min.css
│   │   ├── highlight
│   │   │   ├── arta.css
│   │   │   ├── ascetic.css
│   │   │   ├── atelier-dune.dark.css
│   │   │   ├── atelier-dune.light.css
│   │   │   ├── atelier-forest.dark.css
│   │   │   ├── atelier-forest.light.css
│   │   │   ├── atelier-heath.dark.css
│   │   │   ├── atelier-heath.light.css
│   │   │   ├── atelier-lakeside.dark.css
│   │   │   ├── atelier-lakeside.light.css
│   │   │   ├── atelier-seaside.dark.css
│   │   │   ├── atelier-seaside.light.css
│   │   │   ├── codepen-embed.css
│   │   │   ├── color-brewer.css
│   │   │   ├── dark.css
│   │   │   ├── default.css
│   │   │   ├── docco.css
│   │   │   ├── far.css
│   │   │   ├── foundation.css
│   │   │   ├── github.css
│   │   │   ├── googlecode.css
│   │   │   ├── hybrid.css
│   │   │   ├── idea.css
│   │   │   ├── ir_black.css
│   │   │   ├── kimbie.dark.css
│   │   │   ├── kimbie.light.css
│   │   │   ├── magula.css
│   │   │   ├── mono-blue.css
│   │   │   ├── monokai.css
│   │   │   ├── monokai_sublime.css
│   │   │   ├── obsidian.css
│   │   │   ├── paraiso.dark.css
│   │   │   ├── paraiso.light.css
│   │   │   ├── railscasts.css
│   │   │   ├── rainbow.css
│   │   │   ├── solarized_dark.css
│   │   │   ├── solarized_light.css
│   │   │   ├── sunburst.css
│   │   │   ├── tomorrow.css
│   │   │   ├── tomorrow-night-blue.css
│   │   │   ├── tomorrow-night-bright.css
│   │   │   ├── tomorrow-night.css
│   │   │   ├── tomorrow-night-eighties.css
│   │   │   ├── vs.css
│   │   │   ├── xcode.css
│   │   │   └── zenburn.css
│   │   └── style.css
│   ├── favicon.png
│   ├── fonts
│   │   ├── FontAwesome.otf
│   │   ├── fontawesome-webfont.eot
│   │   ├── fontawesome-webfont.svg
│   │   ├── fontawesome-webfont.ttf
│   │   ├── fontawesome-webfont.woff
│   │   └── fontawesome-webfont.woff2
│   ├── github-icon.png
│   ├── icon_new.jpg
│   ├── icon.png
│   ├── js
│   │   └── highlight.pack.js
│   ├── touch-icon-144-precomposed.png
│   └── we3.png
└── theme.toml

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而我们主题的样式修改主要更改的文件有：「style.css」、 「layouts」。
&lt;img src=&#34;https://wwcreator.github.io/media/hyde-y-1.png&#34; alt=&#34;hyde-y-before&#34; /&gt;
&lt;strong&gt;修改后:&lt;/strong&gt;
&lt;img src=&#34;https://wwcreator.github.io/media/hyde-y-2.png&#34; alt=&#34;hyde-y-after&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;更改背景色为黑色&#34;&gt;更改背景色为黑色：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;.main_wrapper&amp;gt;.main_header {
    background-color: #2053AB;
    font-family: Raleway,&amp;quot;Open Sans&amp;quot;,Arial,sans-serif;
    color: #8CB4EC;
    text-align: center
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;变更为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.main_wrapper&amp;gt;.main_header {
    background-color: #212121;
    font-family: Raleway,&amp;quot;Open Sans&amp;quot;,Arial,sans-serif;
    color: #8CB4EC;
    text-align: center
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;更改字体为-御納户-色&#34;&gt;更改字体为「御納户」色&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://nipponcolors.com/#onando&#34;&gt;Nippon Color&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a {
    background-color: transparent;
    color: #09c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;变更为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a {
    background-color: transparent;
    color: #0C4842
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;更改hover为黑色&#34;&gt;更改hover为黑色&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;.main_wrapper&amp;gt;.main_content .label:hover,.main_wrapper&amp;gt;.main_content .navigation a:hover,.main_wrapper&amp;gt;.main_content .pagination a:hover,.main_wrapper&amp;gt;.main_content .readlink a:hover,.main_wrapper&amp;gt;.main_content h2 a:hover,.main_wrapper&amp;gt;.main_header a:hover {
    background-color: #2053AB;
    color: #fff;
    text-decoration: none
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;.main_wrapper&amp;gt;.main_content .label:hover,.main_wrapper&amp;gt;.main_content .navigation a:hover,.main_wrapper&amp;gt;.main_content .pagination a:hover,.main_wrapper&amp;gt;.main_content .readlink a:hover,.main_wrapper&amp;gt;.main_content h2 a:hover,.main_wrapper&amp;gt;.main_header a:hover {
    background-color: #212121;
    color: #fff;
    text-decoration: none
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是对主题的一些样式变更的例子，起到抛砖引玉的作用，希望你自己能根据要求调出想要的效果。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo 添加站点统计信息</title>
      <link>https://wwcreator.github.io/2017/02/21/hugo-%E6%B7%BB%E5%8A%A0%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Tue, 21 Feb 2017 10:14:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/21/hugo-%E6%B7%BB%E5%8A%A0%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF/</guid>
      <description>

&lt;p&gt;作为一个 Blog 的维护者，当然希望了解站点的统计信息，PV,UV，每个页面的阅读量等，但是 Hugo 主题相对于 Jkyll 少很多，插件也不及等。怎么统计呢？&lt;/p&gt;

&lt;h3 id=&#34;busuanzi-页面计数器&#34;&gt;busuanzi 页面计数器&lt;/h3&gt;

&lt;p&gt;在阅读一些 Blog 后，发现页面有展示统计信息的很少，Google 一番，发现一个非常简单方便的工具 &lt;a href=&#34;http://ibruce.info/2015/04/04/busuanzi/&#34;&gt;不蒜子&lt;/a&gt; .&lt;/p&gt;

&lt;h3 id=&#34;针对-hyde-y-主题添加页面计数器&#34;&gt;针对 hyde-y 主题添加页面计数器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;添加 header 信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vi &lt;code&gt;hyde-y/layouts/partials/head.html&lt;/code&gt; 在 head 中添加以下 script 代码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script async src=&amp;quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;添加站点PV,UV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vi &lt;code&gt;hyde-y/layouts/partials/bloc/content/lastupdate.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;nbsp;&amp;amp;nbsp;
&amp;lt;span id=&amp;quot;busuanzi_container_site_pv&amp;quot;&amp;gt;
    Pv:&amp;lt;span id=&amp;quot;busuanzi_value_site_pv&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;次
&amp;lt;/span&amp;gt;
&amp;amp;nbsp;
&amp;lt;span id=&amp;quot;busuanzi_container_site_uv&amp;quot;&amp;gt;
  Uv:&amp;lt;span id=&amp;quot;busuanzi_value_site_uv&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;次
&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;展示效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wwcreator.github.io/media/site-pv.png&#34; alt=&#34;site-pv&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;添加页面PV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vi &lt;code&gt;hyde-y/layouts/partials/bloc/content/metas.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;nbsp;&amp;amp;nbsp;
&amp;lt;span id=&amp;quot;busuanzi_container_page_pv&amp;quot;&amp;gt;
  本文总阅读量&amp;lt;span id=&amp;quot;busuanzi_value_page_pv&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;次
&amp;lt;/span&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;展示效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wwcreator.github.io/media/page-pv.png&#34; alt=&#34;page-pv&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;结束语&#34;&gt;结束语&lt;/h3&gt;

&lt;p&gt;根据自己的审美，功能来定制主题，首先需要对主题的结构，调用等信息清楚，然后再添加自己的改动。对了，如果大家有 Hugo 的站内搜索功能实现的，务必留言哈。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo_Goal</title>
      <link>https://wwcreator.github.io/2017/02/20/hugo_goal/</link>
      <pubDate>Mon, 20 Feb 2017 13:16:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/20/hugo_goal/</guid>
      <description>

&lt;h2 id=&#34;to-do:1cc7014b1e3901d48c7faf1196e12413&#34;&gt;TO DO.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[ ] hugo 是否支持站内搜索？&lt;/li&gt;
&lt;li&gt;[ ] google、baidu 搜索不到 github page？&lt;/li&gt;
&lt;li&gt;[ ] hugo 是否支持目录结构？&lt;/li&gt;
&lt;li&gt;[ ] hugo webhook 怎么实现 ？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;done:1cc7014b1e3901d48c7faf1196e12413&#34;&gt;DONE .&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[x] hugo更改 post 展示字体大小，从 h2 改为 h3&lt;/li&gt;
&lt;li&gt;[x] hugo 更改 h3 a:hover 的背景色为 #0C4842&lt;/li&gt;
&lt;li&gt;[x] hugo 添加pv,uv统计信息&lt;/li&gt;
&lt;li&gt;[x] hugo 自定义 logo&lt;/li&gt;
&lt;li&gt;[x] 将「back to top」改成「回到顶部」&lt;/li&gt;
&lt;li&gt;[x] 将 content 前面也加入「preview」、「next」&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>license</title>
      <link>https://wwcreator.github.io/license/</link>
      <pubDate>Thu, 16 Feb 2017 01:41:43 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/license/</guid>
      <description>

&lt;h1 id=&#34;simple-public-license-simpl-2-0&#34;&gt;Simple Public License (SimPL-2.0)&lt;/h1&gt;

&lt;h2 id=&#34;preamble&#34;&gt;Preamble&lt;/h2&gt;

&lt;p&gt;This Simple Public License 2.0 (SimPL-2.0 for short) is a plain language
implementation of GPL 2.0.  The words are different, but the goal is the
same - to guarantee for all users the freedom to share and change
software.  If anyone wonders about the meaning of the SimPL, they should
interpret it as consistent with GPL 2.0.&lt;/p&gt;

&lt;h1 id=&#34;simple-public-license-simpl-2-0-1&#34;&gt;Simple Public License (SimPL) 2.0&lt;/h1&gt;

&lt;p&gt;The SimPL applies to the software&amp;rsquo;s source and object code and comes
with any rights that I have in it (other than trademarks). You agree to
the SimPL by copying, distributing, or making a derivative work of the
software.&lt;/p&gt;

&lt;p&gt;You get the royalty free right to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the software for any purpose;&lt;/li&gt;
&lt;li&gt;Make derivative works of it (this is called a &amp;laquo;Derived Work&amp;raquo;);&lt;/li&gt;
&lt;li&gt;Copy and distribute it and any Derived Work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you distribute the software or a Derived Work, you must give back to
the community by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prominently noting the date of any changes you make;&lt;/li&gt;
&lt;li&gt;Leaving other people&amp;rsquo;s copyright notices, warranty disclaimers, and
license terms in place;&lt;/li&gt;
&lt;li&gt;Providing the source code, build scripts, installation scripts, and
interface definitions in a form that is easy to get and best to
modify;&lt;/li&gt;
&lt;li&gt;Licensing it to everyone under SimPL, or substantially similar terms
(such as GPL 2.0), without adding further restrictions to the rights
provided;&lt;/li&gt;
&lt;li&gt;Conspicuously announcing that it is available under that license.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some things that you must shoulder:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You get NO WARRANTIES. None of any kind;&lt;/li&gt;
&lt;li&gt;If the software damages you in any way, you may only recover direct
damages up to the amount you paid for it (that is zero if you did
not pay anything). You may not recover any other damages, including
those called &amp;laquo;consequential damages.&amp;raquo; (The state or country where
you live may not allow you to limit your liability in this way, so
this may not apply to you);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The SimPL continues perpetually, except that your license rights end
automatically if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You do not abide by the &amp;laquo;give back to the community&amp;raquo; terms (your
licensees get to keep their rights if they abide);&lt;/li&gt;
&lt;li&gt;Anyone prevents you from distributing the software under the terms
of the SimPL.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;license-for-the-license&#34;&gt;License for the License&lt;/h2&gt;

&lt;p&gt;You may do anything that you want with the SimPL text; it&amp;rsquo;s a license
form to use in any way that you find helpful.  To avoid confusion,
however, if you change the terms in any way then you may not call your
license the Simple Public License or the SimPL (but feel free to
acknowledge that your license is &amp;laquo;based on the Simple Public License&amp;raquo;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Hugo &#43; GitHub Page 搭建 Blog</title>
      <link>https://wwcreator.github.io/2017/02/14/%E4%BD%BF%E7%94%A8-hugo--github-page-%E6%90%AD%E5%BB%BA-blog/</link>
      <pubDate>Tue, 14 Feb 2017 21:11:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/14/%E4%BD%BF%E7%94%A8-hugo--github-page-%E6%90%AD%E5%BB%BA-blog/</guid>
      <description>

&lt;h2 id=&#34;我想搭建一个自己的blog:8a6bcd0efa30570889e863020952e1cd&#34;&gt;我想搭建一个自己的Blog&lt;/h2&gt;

&lt;p&gt;许久以前，一直想搭一个自己的博客，很不想用第三方的平台，诸多的限制，样式不美观等等，无奈自己没有好好研究怎么使用工具来快速生成，听的最多的是 Jkyll ，Haxo，一看Install Document，望而却步，直到看到 Hugo 工具，简单灵活，我用了两天的时间来研究并部署成功了，分享给有需要的人。&lt;/p&gt;

&lt;h2 id=&#34;step-1-install-hugo-on-ubuntu-16-0-4:8a6bcd0efa30570889e863020952e1cd&#34;&gt;Step 1. Install Hugo on Ubuntu-16.0.4&lt;/h2&gt;

&lt;p&gt;软件的安装，最方便的非 apt-get 莫属。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  apt-get install Hugo
  其余的安装方式可参考官方文档:
  https://gohugo.io/overview/installing/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-hugo-创建-site:8a6bcd0efa30570889e863020952e1cd&#34;&gt;Step 2. Hugo 创建 Site&lt;/h2&gt;

&lt;p&gt;安装完成后，开始创建自己的 Site。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p /data/www/
cd /data/www
# create new site
hugo new site wwcreator
cd /data/www/wwcreator
tree -a
.
|-- archetypes
|-- config.toml
|-- content
|-- data
|-- layouts
`-- static

5 directories, 1 file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到创建的新的 site 的目录结构.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;archetypes: You can create new content files in Hugo using the hugo new command. When you run that command, it adds few configuration properties to the post like date and title. Archetype allows you to define your own configuration properties that will be added to the post front matter whenever hugo new command is used.&lt;/li&gt;
&lt;li&gt;config.toml: Every website should have a configuration file at the root. By default, the configuration file uses TOML format but you can also use YAML or JSON formats as well. TOML is minimal configuration file format that’s easy to read due to obvious semantics. The configuration settings mentioned in the config.toml are applied to the full site. These configuration settings include baseURL and title of the website.&lt;/li&gt;
&lt;li&gt;content: This is where you will store content of the website. Inside content, you will create sub-directories for different sections. Let’s suppose your website has three actions – blog, article, and tutorial then you will have three different directories for each of them inside the content directory. The name of the section i.e. blog, article, or tutorial will be used by Hugo to apply a specific layout applicable to that section.&lt;/li&gt;
&lt;li&gt;data: This directory is used to store configuration files that can be used by Hugo when generating your website. You can write these files in YAML, JSON, or TOML format.&lt;/li&gt;
&lt;li&gt;layouts: The content inside this directory is used to specify how your content will be converted into the static website.&lt;/li&gt;
&lt;li&gt;static: This directory is used to store all the static content that your website will need like images, CSS, JavaScript or other static content.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;step-3-add-content:8a6bcd0efa30570889e863020952e1cd&#34;&gt;Step 3. Add content&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/first.md
tree -a content
vim content/first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2017-02-14T11:11:48-08:00&amp;quot;
draft = true
title = &amp;quot;first&amp;quot;
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;+++&lt;/code&gt; 里的内容是该文章的&lt;code&gt;TOML&lt;/code&gt;配置信息， 也叫做 &lt;code&gt;front matter&lt;/code&gt;。
在文档里添加内容（格式为markdown 格式哦）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2017-02-14T11:11:48-08:00&amp;quot;
draft = true
title = &amp;quot;first&amp;quot;
+++
`hello world`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存退出，第一个文档完成。&lt;/p&gt;

&lt;h2 id=&#34;step-4-启动-hugo-瞧瞧:8a6bcd0efa30570889e863020952e1cd&#34;&gt;Step 4. 启动 hugo 瞧瞧&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo server --baseURL=http://192.168.x.xx:80 \
              --port=80 \
              --buildDrafts \
              --appendPort=false \
              --bind=192.168.x.xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1 of 1 draft rendered
0 future content
1 pages created
0 paginator pages created
0 tags created
0 categories created
in 6 ms
Watching for changes in /data/www/wwcreator/{data,content,layouts,static}
Serving pages from memory
Web Server is available at http://192.168.x.xx:80 (bind address 192.168.x.xxx)
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;访问 &lt;a href=&#34;http://192.168.x.xx:80&#34;&gt;http://192.168.x.xx:80&lt;/a&gt; 然而什么都没有显示，没有我想看到的&lt;code&gt;Hello world&lt;/code&gt;，因为我们还需要安装 &lt;code&gt;theme&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;step-5-install-theme:8a6bcd0efa30570889e863020952e1cd&#34;&gt;Step 5. Install theme&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd themes
git clone https://GitHub.com/enten/hyde-y
更加详细的配置，可以参考：
  http://www.gohugo.org/theme/hyde-y/
  最初按照这个主题的 ReadMe.md 步骤来配置，后续熟练后，可以自己慢调
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;hugo server --baseURL=http://192.168.x.xx:80 \
              --port=80 \
              --buildDrafts \
              --appendPort=false \
              --bind=192.168.x.xxx \
              --theme=hyde-y
# 再次刷新页面，发现主题已经生效，内容也正常显示了。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hugo blog 我们已经准备完成，开始创建 GitHub Page。&lt;/p&gt;

&lt;h2 id=&#34;step-6-使用-github-page:8a6bcd0efa30570889e863020952e1cd&#34;&gt;Step 6. 使用 GitHub Page&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub Pages is a static site hosting service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 GitHub 上新建一个 username.github.io的project ，它默认会生成: &lt;a href=&#34;http://username.github.io/&#34;&gt;http://username.github.io/&lt;/a&gt; 的域名。&lt;/p&gt;

&lt;p&gt;但是现在repository没有任何code，所以接下来通过 hugo 生成静态页面并上传到 GitHub 上。&lt;/p&gt;

&lt;h2 id=&#34;step-7-本地生成静态页面:8a6bcd0efa30570889e863020952e1cd&#34;&gt;Step 7. 本地生成静态页面&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# 注意与本地的区别
hugo  --baseURL=http://username.github.io \
              --buildDrafts \
              --theme=hyde-y
tree -a
.
|-- archetypes
|-- config.toml
|-- content
|-- data
|-- public
|-- layouts
`-- static

6 directories, 1 file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成的静态页面存储在 public 目录，马上要接近成功了。&lt;/p&gt;

&lt;h2 id=&#34;step-8-本地服务配置-github-信息:8a6bcd0efa30570889e863020952e1cd&#34;&gt;Step 8. 本地服务配置 GitHub 信息&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen
cat .ssh/id_rsa.pub
将秘钥的值复制，使用浏览器登陆到 GitHub ，
在 [Settings] -&amp;gt; [SSH and GPG keys] -&amp;gt; [New SSH Key] 粘贴保存。则本地可以跟 GitHub 服务器通信。
git config --global user.name &amp;quot;你的名字&amp;quot;
git config --global user.email &amp;quot;your_email@youremail.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-9-上传到-github:8a6bcd0efa30570889e863020952e1cd&#34;&gt;Step 9. 上传到 GitHub&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd public
git init   # init
# clone with ssh not https
git add remote origin git@GitHub.com:wwcreator/wwcreator.github.io.git
git status  # show the changes
git add -A  
git commit -m &amp;quot;first commit&amp;quot;  # commit
git push origin master  # push
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# git push origin master
Counting objects: 19, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (16/16), done.
Writing objects: 100% (19/19), 5.84 KiB | 0 bytes/s, done.
Total 19 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To git@GitHub.com:wwcreator/wwcreator.github.io.git
 * [new branch]      master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;访问 &lt;a href=&#34;http://wwcreator.github.io&#34;&gt;http://wwcreator.github.io&lt;/a&gt; ，大功告成。有很多好看的主题可以选择，但是我还是选择了 hyde-y ，是我尝试了 N 多主题后的结论，简单美观，如果需要修改样式，可以参考下一篇文章。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL 常用备份工具简介</title>
      <link>https://wwcreator.github.io/2017/02/14/mysql-%E5%B8%B8%E7%94%A8%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 14 Feb 2017 21:11:31 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/14/mysql-%E5%B8%B8%E7%94%A8%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</guid>
      <description>

&lt;h1 id=&#34;mysql-常用的备份方式有哪些&#34;&gt;MySQL 常用的备份方式有哪些 ?&lt;/h1&gt;

&lt;p&gt;不管是MySQL, Oracle，MariaDB 等关系型数据库，还是 MongoDB，Redis 等 NoSQL 数据库，都有众所周知的&lt;code&gt;Logical Backup&lt;/code&gt; &amp;amp;  &lt;code&gt;Physical Backup&lt;/code&gt; 。&lt;/p&gt;

&lt;h2 id=&#34;mysql-logical-backups&#34;&gt;MySQL Logical Backups&lt;/h2&gt;

&lt;p&gt;逻辑备份是按照数据库的逻辑结构（CREATE DATABASE, CREATE TABLE 语句）和内容（INSERT,分隔文本）的方式来存储。非常常用的是当属 MySQL 自带的 &lt;code&gt;mysqldump&lt;/code&gt;和 &lt;code&gt;mydumper&lt;/code&gt; 工具。&lt;/p&gt;

&lt;h3 id=&#34;mysqldump&#34;&gt;mysqldump&lt;/h3&gt;

&lt;p&gt;mysqldump 支持导出部分DB，部分Table， 而且还支持 &amp;ndash;where 行条件过滤（不支持列过滤），InnoDB引擎不锁表导出等。还支持获取导出的 Binlog position，很方便的进行PIT（point in time）recover。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for example:
  mysqldump -u test -p -P 3307 -h 127.0.0.1 --single-transaction --master-data=2 --database test_dump --tables test1 &amp;gt; /test/test_dump_test1.sql

recover：
  mysql -u test -p -P 3307 -h 127.0.0.1 -D test_dump -e &amp;quot;source /test/test_dump_test1.sql&amp;quot; &amp;gt;import.log 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PS: MySQL 5.7.11 版本引入 mysqlpump 工具，支持多线程（粒度到表级别），压缩导入导出。
mysqlpump的并行导出功能的架构为：队列+线程，允许有多个队列，每个队列下有多个线程，而一个队列可以绑定1个或者多个数据库。但是，对于每张表的导出只能是单个线程的。&lt;/p&gt;

&lt;h3 id=&#34;mydumper&#34;&gt;mydumper&lt;/h3&gt;

&lt;p&gt;mydumper（&amp;amp;myloader）是用于对MySQL数据库进行多线程备份和恢复的开源 (GNU GPLv3)工具。开发人员主要来自MySQL、Facebook和SkySQL公司，目前由Percona公司开发和维护。
mydumper 支持多线程备份恢复，粒度到记录级别，对于导出大容量的数据，效率非常高。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for example:
  mydumper -u test -p -P 3307 -h 127.0.0.1 -B test_dump -T test1 -b -t 16 -c -o /test/test_dump_test1
recover:
  myloader -u test -p -P 3307 -h 127.0.0.1 --directory=/test/test_dump_test1 --overwrite-tables -B test_dump
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;备份原理：
  - 主线程将各个库表，分成若干个任务，放入任务队列
  - 执行线程从任务队列读取任务，并执行。&lt;/p&gt;

&lt;h2 id=&#34;mysql-physical-backups&#34;&gt;MySQL Physical Backups&lt;/h2&gt;

&lt;p&gt;物理备份由一系列的存储数据库内容的 raw 格式的文件组成，为了保证一致性，必须关机来拷贝物理文件，但是 Percona 公司的 Xtrabackup 工具完美的解决了关机备份的不可行方案，从而实现热备。&lt;/p&gt;

&lt;h3 id=&#34;xtrabackup&#34;&gt;Xtrabackup&lt;/h3&gt;

&lt;p&gt;Xtrabackup 有两个主要的工具，xtrabackup，innobackup：
- xtrabackup 只能备份 InnoDB 和 XtraDB 两种数据表
- innobackupex 封装了 xtrabackup，同时可以备份 MyISAM 数据表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for example:
  第一步：
  innobackupex --user=bkpuser  --password=bkppassword /data/backups
  第二步：
  cd /data/backups
  innobackupex --apply-log ./
recover:
  将备份拷贝到需要的目录即可使用。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;备份的原理：
1. Xtrabackup ：
   - REDO 拷贝线程， 拷贝 REDO Log
   - ibd 拷贝线程 拷贝 InnoDB 物理文件
2. 完成后，执行 FTWRL 添加全局锁
3. 拷贝 frm，MYD,MYI etc.
4. 停止拷贝 REDO ,UNLOCK tables
5. 等待 xtrabackup 结束，备份结束&lt;/p&gt;

&lt;h2 id=&#34;mysqldump-pk-mydumper&#34;&gt;mysqldump PK mydumper&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;mysqldump 为 MySQL 原生工具，不需要额外安装，对于导出不是特别大的DB，仍然是非常棒的工具，但对于容量大，但又必须逻辑导出的场景就不是特别合适，需要的时间特别长，不支持多线程导入导出。&lt;/li&gt;
&lt;li&gt;mydumper 需要额外安装才能使用，支持多线程备份导入，速度快，支持后台模式导出&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;logical-pk-physical-backup&#34;&gt;Logical PK Physical Backup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;逻辑备份可以灵活的导出数据（表结构，数据，过滤等）&lt;/li&gt;
&lt;li&gt;逻辑备份与物理备份导出所有数据来看，要慢很多，因为需要读取数据并转换&lt;/li&gt;
&lt;li&gt;逻辑备份的恢复时间长&lt;/li&gt;
&lt;li&gt;物理备份的文件与线上 MySQL 完全一致，包含所有的日志等信息&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>