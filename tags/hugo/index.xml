<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on 户枢不蠹</title>
    <link>https://wwcreator.github.io/tags/hugo/</link>
    <description>Recent content in Hugo on 户枢不蠹</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>yuwen_qing@126.com (wwcreator)</managingEditor>
    <webMaster>yuwen_qing@126.com (wwcreator)</webMaster>
    <copyright>(c) 2017 wwcreator.</copyright>
    <lastBuildDate>Wed, 22 Feb 2017 13:16:48 -0800</lastBuildDate>
    <atom:link href="https://wwcreator.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>博客园迁移到Hugo</title>
      <link>https://wwcreator.github.io/2017/02/22/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%BF%81%E7%A7%BB%E5%88%B0hugo/</link>
      <pubDate>Wed, 22 Feb 2017 13:16:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/22/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E8%BF%81%E7%A7%BB%E5%88%B0hugo/</guid>
      <description>

&lt;p&gt;对于早期的很多用户来说，一直在博客园上写自己的博文，但是慢慢的，大家开始都有自己的专属 Blog 了，那之前的 Post 肿么办呢？&lt;/p&gt;

&lt;p&gt;来，我教你。&lt;/p&gt;

&lt;h2 id=&#34;备份博客园数据:8480fb8dece3f835b0e0e52af9ea4e0a&#34;&gt;备份博客园数据&lt;/h2&gt;

&lt;p&gt;备份这件小事，应该难不倒你，但是博客园有限制，工作日在「08:00-18:00」,不能备份，所以备份需要挑时间的喔。备份生成的是一份 XML 格式的文件，下一步，continue 。&lt;/p&gt;

&lt;h3 id=&#34;解析-xml-文件的内容:8480fb8dece3f835b0e0e52af9ea4e0a&#34;&gt;解析 XML 文件的内容&lt;/h3&gt;

&lt;h4 id=&#34;注意:8480fb8dece3f835b0e0e52af9ea4e0a&#34;&gt;注意：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;备份的 XML 没有美化成标准的 XML 格式，所以需要去网站上搜索进行 XML 格式美化再保存替换。&lt;/li&gt;
&lt;li&gt;博文的内容被 &lt;code&gt;&amp;lt;![CDATA[&lt;/code&gt; &lt;code&gt;]]&lt;/code&gt; 包含，如果不指定获取所有内容参数，则会被解析忽略。&lt;/li&gt;
&lt;li&gt;生成 MD 文档 front matter 为 TOML 格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面看姐的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*-

import os
from xml.dom.minidom import parse
import sys
reload(sys)
sys.setdefaultencoding(&#39;utf-8&#39;)

BACKUP_FILE = &#39;CNBlogs_BlogBackup_131_201602_201702_2.xml&#39;
DOMTree = parse(BACKUP_FILE)
root = DOMTree.documentElement
blog_title = root.getElementsByTagName(&#39;title&#39;)[0].childNodes[0].data
if not os.path.isdir(blog_title):
    os.mkdir(blog_title)

blogs = root.getElementsByTagName(&#39;item&#39;)

tag = [&#39;算法&#39;,&#39;C++&#39;, &#39;git&#39;, &#39;GPU&#39;, &#39;驾驶&#39;, &#39;DL&#39;, &#39;TORCS&#39;, &#39;服务器&#39; ,&#39;codility&#39; ,&#39;编译器&#39; ,&#39;python&#39; ,&#39;机器&#39;,&#39;强化&#39;,&#39;配置&#39;,&#39;ubuntu&#39;]


for blog in blogs:
    try:
        title = blog.getElementsByTagName(&#39;title&#39;)[0].childNodes[0].data
        origin_link = blog.getElementsByTagName(&#39;link&#39;)[0].childNodes[0].data
        date = blog.getElementsByTagName(&#39;pubDate&#39;)[0].childNodes[0].data
        # content = blog.getElementsByTagName(&#39;description&#39;)[0].childNodes[0].data
        content = blog.getElementsByTagName(&#39;description&#39;)[0].firstChild.wholeText
        #categories
        for test in tag:
            if title.find(test) != -1:
                categories = test
                break
            else:
                categories = &#39;Life&#39;
        with open(blog_title + os.sep + title + &#39;.md&#39;, &#39;w&#39;) as f:
            f.write(&#39;+++ \n&#39;)
            f.write(&#39;title = &amp;quot;%s&amp;quot; \n&#39; % title)
            f.write(&#39;date = &amp;quot;%s&amp;quot; \n&#39; % date)
            f.write(&#39;categories = [&amp;quot;%s&amp;quot;] \n&#39; % categories)
            f.write(&#39;+++ \n&#39;)
            f.write(content)
            f.write(&#39;\n\n&#39;)
            f.close()
    except Exception, e:
        print e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行该脚本，会生成所有的博文。拷贝到 Hugo 的content/post/ 目录，在本地预览效果吧，如果没有问题就 &lt;code&gt;Push&lt;/code&gt; 到 &lt;code&gt;Github&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;结束语:8480fb8dece3f835b0e0e52af9ea4e0a&#34;&gt;结束语&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用这样是获取不到数据：&lt;code&gt;content = blog.getElementsByTagName(&#39;description&#39;)[0].childNodes[0].data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需要使用 wholeText 来读取&lt;code&gt;&amp;lt;![CDATA[&lt;/code&gt; &lt;code&gt;]]&lt;/code&gt;里的内容。
&lt;code&gt;content = blog.getElementsByTagName(&#39;description&#39;)[0].firstChild.wholeText&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo 搭建博客注意事项</title>
      <link>https://wwcreator.github.io/2017/02/22/hugo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Wed, 22 Feb 2017 12:11:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/22/hugo-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>

&lt;h3 id=&#34;标题不能使用-号&#34;&gt;标题不能使用 + 号&lt;/h3&gt;

&lt;p&gt;在v0.18 mac 版本中，如果 &lt;code&gt;title&lt;/code&gt; 包含 &lt;code&gt;+&lt;/code&gt; ，虽然不报任何错误，但是不会生成具体的静态页面。&lt;/p&gt;

&lt;h3 id=&#34;将-back-to-top-改成-回到顶部&#34;&gt;将 back to top 改成 「回到顶部」&lt;/h3&gt;

&lt;p&gt;vi &lt;code&gt;themes/hyde-y/data/Strings.yaml&lt;/code&gt;
将 「back to top」改成 「回到顶部」。&lt;/p&gt;

&lt;h3 id=&#34;hugo-怎么插入本地-image&#34;&gt;hugo 怎么插入本地 image&lt;/h3&gt;

&lt;p&gt;之前一直不知道怎么插入image，不知道 hugo 是怎么引用的，后续了解到，在site 的目录下的 static 下就是存储的静态文件，我们创建 media 目录存放图片等媒体文件，引用的话，直接「/media/xxx.png」 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;注意：&lt;/em&gt;&lt;/strong&gt; 不要使用 xxx.PNG 这样的大写后缀，生成的静态页面为小写后缀，然后出现找不到该 Image。&lt;/p&gt;

&lt;h3 id=&#34;hugo-content-顶部添加-preview-next&#34;&gt;hugo content 顶部添加 preview、next&lt;/h3&gt;

&lt;p&gt;vi &lt;code&gt;themes/hyde-y/layouts/post/single.hat.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;&amp;lt;/header&amp;gt;&lt;/code&gt;前添加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;br/&amp;gt;
{{ partial &amp;quot;bloc/content/navigation&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;google-baidu-完全搜索不到博文&#34;&gt;google，baidu 完全搜索不到博文&lt;/h3&gt;

&lt;p&gt;因为google，baidu 还没有收录我们的URL，所以在google 里输入：site:网址URL 如果能搜索出来则说明，google 已经添加我们的网址。不能则需要提交网址到 google。百度同理。
&lt;a href=&#34;https://www.google.com/webmasters/tools/home&#34;&gt;https://www.google.com/webmasters/tools/home&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hugo-不支持站内搜索&#34;&gt;Hugo 不支持站内搜索&lt;/h3&gt;

&lt;h3 id=&#34;hugo-还不支持生成目录树&#34;&gt;Hugo 还不支持生成目录树&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>定制主题 &amp; hyde-y</title>
      <link>https://wwcreator.github.io/2017/02/22/%E5%AE%9A%E5%88%B6%E4%B8%BB%E9%A2%98--hyde-y/</link>
      <pubDate>Wed, 22 Feb 2017 10:11:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/22/%E5%AE%9A%E5%88%B6%E4%B8%BB%E9%A2%98--hyde-y/</guid>
      <description>

&lt;p&gt;在前面的&lt;a href=&#34;https://wwcreator.github.io/2017/02/14/%E4%BD%BF%E7%94%A8-hugo--github-page-%E6%90%AD%E5%BB%BA-blog/&#34;&gt;「使用 Hugo + GitHub Page 搭建 Blog」&lt;/a&gt; 文章中详细的说明搭建blog 的组成元素，「hugo」,「GitHub Page」,[Theme]，这篇文章是前面文章的续写，聊聊更改主题样式这件事。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hyde-y/
├── archetypes
│   └── default.md
├── data
│   ├── Formats.yaml
│   ├── Modules.toml
│   └── Strings.yaml
├── Gruntfile.js
├── images
│   ├── screenshot.png
│   └── tn.png
├── layouts
│   ├── 404.html
│   ├── code
│   │   ├── section.li.html
│   │   ├── single.hat.html
│   │   └── summary.hat.html
│   ├── _default
│   │   ├── list.html
│   │   ├── list.li.html
│   │   ├── section.html
│   │   ├── section.li.html
│   │   ├── single.boot.html
│   │   ├── single.content.html
│   │   ├── single.hat.html
│   │   ├── single.html
│   │   ├── summary.boot.html
│   │   ├── summary.content.html
│   │   ├── summary.hat.html
│   │   ├── summary.html
│   │   └── terms.html
│   ├── index.html
│   ├── partials
│   │   ├── base
│   │   │   ├── footer.html
│   │   │   ├── header.html
│   │   │   ├── imports.html
│   │   │   ├── metas.html
│   │   │   └── scripts.html
│   │   ├── bloc
│   │   │   ├── content
│   │   │   │   ├── badges.html
│   │   │   │   ├── comments.html
│   │   │   │   ├── content.html
│   │   │   │   ├── h1-link-title.html
│   │   │   │   ├── h1-title.html
│   │   │   │   ├── h2-link-title.html
│   │   │   │   ├── h2-title.html
│   │   │   │   ├── lastupdate.html
│   │   │   │   ├── link-title.html
│   │   │   │   ├── metas.html
│   │   │   │   ├── navigation.html
│   │   │   │   ├── pagination.html
│   │   │   │   ├── readlink.html
│   │   │   │   └── summary.html
│   │   │   ├── footer
│   │   │   │   ├── credits_copyright.html
│   │   │   │   ├── credits_footline.html
│   │   │   │   ├── credits.html
│   │   │   │   └── nav.html
│   │   │   └── header
│   │   │       ├── brand.html
│   │   │       ├── brand_title.html
│   │   │       ├── brand_topline.html
│   │   │       ├── nav.html
│   │   │       ├── nav_primary.html
│   │   │       └── nav_secondary.html
│   │   ├── error-404.html
│   │   ├── footer-extra.html
│   │   ├── foot-extra.html
│   │   ├── foot.html
│   │   ├── header-extra.html
│   │   ├── head-extra.html
│   │   ├── head.html
│   │   ├── homepage.html
│   │   └── modules
│   │       ├── disqus.html
│   │       ├── flattr.html
│   │       ├── github-ribbon.html
│   │       ├── hugo-version.html
│   │       ├── page
│   │       │   ├── badges.html
│   │       │   ├── date.html
│   │       │   ├── labels.html
│   │       │   ├── link
│   │       │   │   ├── read.html
│   │       │   │   └── title.html
│   │       │   ├── navigation.html
│   │       │   ├── summary.html
│   │       │   ├── tags.html
│   │       │   └── title.html
│   │       └── site
│   │           ├── brand.html
│   │           ├── copyright.html
│   │           ├── footline.html
│   │           ├── lastupdate.html
│   │           ├── link
│   │           │   ├── base.html
│   │           │   ├── footmenu.html
│   │           │   ├── home.html
│   │           │   ├── menu.html
│   │           │   ├── social
│   │           │   │   ├── bitbucket.html
│   │           │   │   ├── email.html
│   │           │   │   ├── facebook.html
│   │           │   │   ├── flickr.html
│   │           │   │   ├── github.html
│   │           │   │   ├── googleplus.html
│   │           │   │   ├── linkedin.html
│   │           │   │   ├── rss.html
│   │           │   │   ├── twitch.html
│   │           │   │   ├── twitter.html
│   │           │   │   ├── vimeo.html
│   │           │   │   └── youtube.html
│   │           │   ├── social.html
│   │           │   └── top.html
│   │           ├── pagination.html
│   │           └── topline.html
│   ├── post
│   │   ├── single.boot.html
│   │   ├── single.hat.html
│   │   ├── summary.boot.html
│   │   └── summary.hat.html
│   ├── section
│   │   └── code.html
│   ├── shortcodes
│   │   ├── alert.html
│   │   └── labels.html
│   └── taxonomy
│       ├── topic.html
│       └── topic.terms.html
├── LICENSE
├── package.json
├── README.md
├── scss
│   ├── _00-config.less
│   ├── _01-base.less
│   ├── _02-layout.less
│   ├── _03-modules.less
│   ├── _04-themes.less
│   ├── _05-alerts.less
│   ├── knacss
│   │   ├── _00-config.less
│   │   ├── _01a-normalize.less
│   │   ├── _01b-base.less
│   │   ├── _02-layout.less
│   │   ├── _03-grids.less
│   │   ├── _04-tables.less
│   │   ├── _05-forms.less
│   │   ├── _06-helpers.less
│   │   ├── _07-responsive.less
│   │   ├── _08-print.less
│   │   ├── _09-misc.less
│   │   ├── _10-styling.less
│   │   ├── _11-wordpress.less
│   │   └── knacss.less
│   └── style.less
├── static
│   ├── css
│   │   ├── font-awesome.min.css
│   │   ├── highlight
│   │   │   ├── arta.css
│   │   │   ├── ascetic.css
│   │   │   ├── atelier-dune.dark.css
│   │   │   ├── atelier-dune.light.css
│   │   │   ├── atelier-forest.dark.css
│   │   │   ├── atelier-forest.light.css
│   │   │   ├── atelier-heath.dark.css
│   │   │   ├── atelier-heath.light.css
│   │   │   ├── atelier-lakeside.dark.css
│   │   │   ├── atelier-lakeside.light.css
│   │   │   ├── atelier-seaside.dark.css
│   │   │   ├── atelier-seaside.light.css
│   │   │   ├── codepen-embed.css
│   │   │   ├── color-brewer.css
│   │   │   ├── dark.css
│   │   │   ├── default.css
│   │   │   ├── docco.css
│   │   │   ├── far.css
│   │   │   ├── foundation.css
│   │   │   ├── github.css
│   │   │   ├── googlecode.css
│   │   │   ├── hybrid.css
│   │   │   ├── idea.css
│   │   │   ├── ir_black.css
│   │   │   ├── kimbie.dark.css
│   │   │   ├── kimbie.light.css
│   │   │   ├── magula.css
│   │   │   ├── mono-blue.css
│   │   │   ├── monokai.css
│   │   │   ├── monokai_sublime.css
│   │   │   ├── obsidian.css
│   │   │   ├── paraiso.dark.css
│   │   │   ├── paraiso.light.css
│   │   │   ├── railscasts.css
│   │   │   ├── rainbow.css
│   │   │   ├── solarized_dark.css
│   │   │   ├── solarized_light.css
│   │   │   ├── sunburst.css
│   │   │   ├── tomorrow.css
│   │   │   ├── tomorrow-night-blue.css
│   │   │   ├── tomorrow-night-bright.css
│   │   │   ├── tomorrow-night.css
│   │   │   ├── tomorrow-night-eighties.css
│   │   │   ├── vs.css
│   │   │   ├── xcode.css
│   │   │   └── zenburn.css
│   │   └── style.css
│   ├── favicon.png
│   ├── fonts
│   │   ├── FontAwesome.otf
│   │   ├── fontawesome-webfont.eot
│   │   ├── fontawesome-webfont.svg
│   │   ├── fontawesome-webfont.ttf
│   │   ├── fontawesome-webfont.woff
│   │   └── fontawesome-webfont.woff2
│   ├── github-icon.png
│   ├── icon_new.jpg
│   ├── icon.png
│   ├── js
│   │   └── highlight.pack.js
│   ├── touch-icon-144-precomposed.png
│   └── we3.png
└── theme.toml

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而我们主题的样式修改主要更改的文件有：「style.css」、 「layouts」。
&lt;img src=&#34;https://wwcreator.github.io/media/hyde-y-1.PNG&#34; alt=&#34;hyde-y-before&#34; /&gt;
&lt;strong&gt;修改后:&lt;/strong&gt;
&lt;img src=&#34;https://wwcreator.github.io/media/hyde-y-2.PNG&#34; alt=&#34;hyde-y-after&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;更改背景色为黑色&#34;&gt;更改背景色为黑色：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;.main_wrapper&amp;gt;.main_header {
    background-color: #2053AB;
    font-family: Raleway,&amp;quot;Open Sans&amp;quot;,Arial,sans-serif;
    color: #8CB4EC;
    text-align: center
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;变更为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.main_wrapper&amp;gt;.main_header {
    background-color: #212121;
    font-family: Raleway,&amp;quot;Open Sans&amp;quot;,Arial,sans-serif;
    color: #8CB4EC;
    text-align: center
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;更改字体为-御納户-色&#34;&gt;更改字体为「御納户」色&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://nipponcolors.com/#onando&#34;&gt;Nippon Color&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a {
    background-color: transparent;
    color: #09c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;变更为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a {
    background-color: transparent;
    color: #0C4842
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;更改hover为黑色&#34;&gt;更改hover为黑色&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;.main_wrapper&amp;gt;.main_content .label:hover,.main_wrapper&amp;gt;.main_content .navigation a:hover,.main_wrapper&amp;gt;.main_content .pagination a:hover,.main_wrapper&amp;gt;.main_content .readlink a:hover,.main_wrapper&amp;gt;.main_content h2 a:hover,.main_wrapper&amp;gt;.main_header a:hover {
    background-color: #2053AB;
    color: #fff;
    text-decoration: none
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;.main_wrapper&amp;gt;.main_content .label:hover,.main_wrapper&amp;gt;.main_content .navigation a:hover,.main_wrapper&amp;gt;.main_content .pagination a:hover,.main_wrapper&amp;gt;.main_content .readlink a:hover,.main_wrapper&amp;gt;.main_content h2 a:hover,.main_wrapper&amp;gt;.main_header a:hover {
    background-color: #212121;
    color: #fff;
    text-decoration: none
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是对主题的一些样式变更的例子，起到抛砖引玉的作用，希望你自己能根据要求调出想要的效果。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo 添加站点统计信息</title>
      <link>https://wwcreator.github.io/2017/02/21/hugo-%E6%B7%BB%E5%8A%A0%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Tue, 21 Feb 2017 10:14:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/21/hugo-%E6%B7%BB%E5%8A%A0%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF/</guid>
      <description>

&lt;p&gt;作为一个 Blog 的维护者，当然希望了解站点的统计信息，PV,UV，每个页面的阅读量等，但是 Hugo 主题相对于 Jkyll 少很多，插件也不及等。怎么统计呢？&lt;/p&gt;

&lt;h3 id=&#34;busuanzi-页面计数器:17e4215a535b0868fb863432b24a2d26&#34;&gt;busuanzi 页面计数器&lt;/h3&gt;

&lt;p&gt;在阅读一些 Blog 后，发现页面有展示统计信息的很少，Google 一番，发现一个非常简单方便的工具 &lt;a href=&#34;http://ibruce.info/2015/04/04/busuanzi/&#34;&gt;不蒜子&lt;/a&gt; .&lt;/p&gt;

&lt;h3 id=&#34;针对-hyde-y-主题添加页面计数器:17e4215a535b0868fb863432b24a2d26&#34;&gt;针对 hyde-y 主题添加页面计数器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;添加 header 信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vi &lt;code&gt;hyde-y/layouts/partials/head.html&lt;/code&gt; 在 head 中添加以下 script 代码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script async src=&amp;quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;添加站点PV,UV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vi &lt;code&gt;hyde-y/layouts/partials/bloc/content/lastupdate.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;nbsp;&amp;amp;nbsp;
&amp;lt;span id=&amp;quot;busuanzi_container_site_pv&amp;quot;&amp;gt;
    Pv:&amp;lt;span id=&amp;quot;busuanzi_value_site_pv&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;次
&amp;lt;/span&amp;gt;
&amp;amp;nbsp;
&amp;lt;span id=&amp;quot;busuanzi_container_site_uv&amp;quot;&amp;gt;
  Uv:&amp;lt;span id=&amp;quot;busuanzi_value_site_uv&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;次
&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;展示效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wwcreator.github.io/media/site-pv.png&#34; alt=&#34;site-pv&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;添加页面PV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vi &lt;code&gt;hyde-y/layouts/partials/bloc/content/metas.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;nbsp;&amp;amp;nbsp;
&amp;lt;span id=&amp;quot;busuanzi_container_page_pv&amp;quot;&amp;gt;
  本文总阅读量&amp;lt;span id=&amp;quot;busuanzi_value_page_pv&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;次
&amp;lt;/span&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;展示效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wwcreator.github.io/media/page-pv.png&#34; alt=&#34;page-pv&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;结束语:17e4215a535b0868fb863432b24a2d26&#34;&gt;结束语&lt;/h3&gt;

&lt;p&gt;根据自己的审美，功能来定制主题，首先需要对主题的结构，调用等信息清楚，然后再添加自己的改动。对了，如果大家有 Hugo 的站内搜索功能实现的，务必留言哈。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo_Goal</title>
      <link>https://wwcreator.github.io/2017/02/20/hugo_goal/</link>
      <pubDate>Mon, 20 Feb 2017 13:16:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/20/hugo_goal/</guid>
      <description>

&lt;h2 id=&#34;to-do:1cc7014b1e3901d48c7faf1196e12413&#34;&gt;TO DO.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[ ] hugo 是否支持站内搜索？&lt;/li&gt;
&lt;li&gt;[ ] google、baidu 搜索不到 github page？&lt;/li&gt;
&lt;li&gt;[ ] hugo 是否支持目录结构？&lt;/li&gt;
&lt;li&gt;[ ] hugo webhook 怎么实现 ？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;done:1cc7014b1e3901d48c7faf1196e12413&#34;&gt;DONE .&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[x] hugo更改 post 展示字体大小，从 h2 改为 h3&lt;/li&gt;
&lt;li&gt;[x] hugo 更改 h3 a:hover 的背景色为 #0C4842&lt;/li&gt;
&lt;li&gt;[x] hugo 添加pv,uv统计信息&lt;/li&gt;
&lt;li&gt;[x] hugo 自定义 logo&lt;/li&gt;
&lt;li&gt;[x] 将「back to top」改成「回到顶部」&lt;/li&gt;
&lt;li&gt;[x] 将 content 前面也加入「preview」、「next」&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>使用 Hugo &#43; GitHub Page 搭建 Blog</title>
      <link>https://wwcreator.github.io/2017/02/14/%E4%BD%BF%E7%94%A8-hugo--github-page-%E6%90%AD%E5%BB%BA-blog/</link>
      <pubDate>Tue, 14 Feb 2017 21:11:48 -0800</pubDate>
      <author>yuwen_qing@126.com (wwcreator)</author>
      <guid>https://wwcreator.github.io/2017/02/14/%E4%BD%BF%E7%94%A8-hugo--github-page-%E6%90%AD%E5%BB%BA-blog/</guid>
      <description>

&lt;h2 id=&#34;我想搭建一个自己的blog&#34;&gt;我想搭建一个自己的Blog&lt;/h2&gt;

&lt;p&gt;许久以前，一直想搭一个自己的博客，很不想用第三方的平台，诸多的限制，样式不美观等等，无奈自己没有好好研究怎么使用工具来快速生成，听的最多的是 Jkyll ，Haxo，一看Install Document，望而却步，直到看到 Hugo 工具，简单灵活，我用了两天的时间来研究并部署成功了，分享给有需要的人。&lt;/p&gt;

&lt;h2 id=&#34;step-1-install-hugo-on-ubuntu-16-0-4&#34;&gt;Step 1. Install Hugo on Ubuntu-16.0.4&lt;/h2&gt;

&lt;p&gt;软件的安装，最方便的非 apt-get 莫属。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  apt-get install Hugo
  其余的安装方式可参考官方文档:
  https://gohugo.io/overview/installing/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-hugo-创建-site&#34;&gt;Step 2. Hugo 创建 Site&lt;/h2&gt;

&lt;p&gt;安装完成后，开始创建自己的 Site。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p /data/www/
cd /data/www
# create new site
hugo new site wwcreator
cd /data/www/wwcreator
tree -a
.
|-- archetypes
|-- config.toml
|-- content
|-- data
|-- layouts
`-- static

5 directories, 1 file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到创建的新的 site 的目录结构.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;archetypes: You can create new content files in Hugo using the hugo new command. When you run that command, it adds few configuration properties to the post like date and title. Archetype allows you to define your own configuration properties that will be added to the post front matter whenever hugo new command is used.&lt;/li&gt;
&lt;li&gt;config.toml: Every website should have a configuration file at the root. By default, the configuration file uses TOML format but you can also use YAML or JSON formats as well. TOML is minimal configuration file format that’s easy to read due to obvious semantics. The configuration settings mentioned in the config.toml are applied to the full site. These configuration settings include baseURL and title of the website.&lt;/li&gt;
&lt;li&gt;content: This is where you will store content of the website. Inside content, you will create sub-directories for different sections. Let’s suppose your website has three actions – blog, article, and tutorial then you will have three different directories for each of them inside the content directory. The name of the section i.e. blog, article, or tutorial will be used by Hugo to apply a specific layout applicable to that section.&lt;/li&gt;
&lt;li&gt;data: This directory is used to store configuration files that can be used by Hugo when generating your website. You can write these files in YAML, JSON, or TOML format.&lt;/li&gt;
&lt;li&gt;layouts: The content inside this directory is used to specify how your content will be converted into the static website.&lt;/li&gt;
&lt;li&gt;static: This directory is used to store all the static content that your website will need like images, CSS, JavaScript or other static content.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;step-3-add-content&#34;&gt;Step 3. Add content&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/first.md
tree -a content
vim content/first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2017-02-14T11:11:48-08:00&amp;quot;
draft = true
title = &amp;quot;first&amp;quot;
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;+++&lt;/code&gt; 里的内容是该文章的&lt;code&gt;TOML&lt;/code&gt;配置信息， 也叫做 &lt;code&gt;front matter&lt;/code&gt;。
在文档里添加内容（格式为markdown 格式哦）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2017-02-14T11:11:48-08:00&amp;quot;
draft = true
title = &amp;quot;first&amp;quot;
+++
`hello world`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存退出，第一个文档完成。&lt;/p&gt;

&lt;h2 id=&#34;step-4-启动-hugo-瞧瞧&#34;&gt;Step 4. 启动 hugo 瞧瞧&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo server --baseURL=http://192.168.x.xx:80 \
              --port=80 \
              --buildDrafts \
              --appendPort=false \
              --bind=192.168.x.xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1 of 1 draft rendered
0 future content
1 pages created
0 paginator pages created
0 tags created
0 categories created
in 6 ms
Watching for changes in /data/www/wwcreator/{data,content,layouts,static}
Serving pages from memory
Web Server is available at http://192.168.x.xx:80 (bind address 192.168.x.xxx)
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;访问 &lt;a href=&#34;http://192.168.x.xx:80&#34;&gt;http://192.168.x.xx:80&lt;/a&gt; 然而什么都没有显示，没有我想看到的&lt;code&gt;Hello world&lt;/code&gt;，因为我们还需要安装 &lt;code&gt;theme&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;step-5-install-theme&#34;&gt;Step 5. Install theme&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd themes
git clone https://GitHub.com/enten/hyde-y
更加详细的配置，可以参考：
  http://www.gohugo.org/theme/hyde-y/
  最初按照这个主题的 ReadMe.md 步骤来配置，后续熟练后，可以自己慢调
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;hugo server --baseURL=http://192.168.x.xx:80 \
              --port=80 \
              --buildDrafts \
              --appendPort=false \
              --bind=192.168.x.xxx \
              --theme=hyde-y
# 再次刷新页面，发现主题已经生效，内容也正常显示了。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hugo blog 我们已经准备完成，开始创建 GitHub Page。&lt;/p&gt;

&lt;h2 id=&#34;step-6-使用-github-page&#34;&gt;Step 6. 使用 GitHub Page&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub Pages is a static site hosting service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 GitHub 上新建一个 username.github.io的project ，它默认会生成: &lt;a href=&#34;http://username.github.io/&#34;&gt;http://username.github.io/&lt;/a&gt; 的域名。&lt;/p&gt;

&lt;p&gt;但是现在repository没有任何code，所以接下来通过 hugo 生成静态页面并上传到 GitHub 上。&lt;/p&gt;

&lt;h2 id=&#34;step-7-本地生成静态页面&#34;&gt;Step 7. 本地生成静态页面&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# 注意与本地的区别
hugo  --baseURL=http://username.github.io \
              --buildDrafts \
              --theme=hyde-y
tree -a
.
|-- archetypes
|-- config.toml
|-- content
|-- data
|-- public
|-- layouts
`-- static

6 directories, 1 file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成的静态页面存储在 public 目录，马上要接近成功了。&lt;/p&gt;

&lt;h2 id=&#34;step-8-本地服务配置-github-信息&#34;&gt;Step 8. 本地服务配置 GitHub 信息&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen
cat .ssh/id_rsa.pub
将秘钥的值复制，使用浏览器登陆到 GitHub ，
在 [Settings] -&amp;gt; [SSH and GPG keys] -&amp;gt; [New SSH Key] 粘贴保存。则本地可以跟 GitHub 服务器通信。
git config --global user.name &amp;quot;你的名字&amp;quot;
git config --global user.email &amp;quot;your_email@youremail.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-9-上传到-github&#34;&gt;Step 9. 上传到 GitHub&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd public
git init   # init
# clone with ssh not https
git add remote origin git@GitHub.com:wwcreator/wwcreator.github.io.git
git status  # show the changes
git add -A  
git commit -m &amp;quot;first commit&amp;quot;  # commit
git push origin master  # push
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# git push origin master
Counting objects: 19, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (16/16), done.
Writing objects: 100% (19/19), 5.84 KiB | 0 bytes/s, done.
Total 19 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To git@GitHub.com:wwcreator/wwcreator.github.io.git
 * [new branch]      master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;访问 &lt;a href=&#34;http://wwcreator.github.io&#34;&gt;http://wwcreator.github.io&lt;/a&gt; ，大功告成。有很多好看的主题可以选择，但是我还是选择了 hyde-y ，是我尝试了 N 多主题后的结论，简单美观，如果需要修改样式，可以参考下一篇文章。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>